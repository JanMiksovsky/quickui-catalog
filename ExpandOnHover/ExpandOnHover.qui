<Control name="ExpandOnHover">

<content>
    <div id="ExpandOnHover_content"/>
</content>

<style>
{
    border: 1px solid gray;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    position: relative;
}

#ExpandOnHover_content {
    border: 1px solid red;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    position: relative;
}

/*
#ExpandOnHover_content:hover {
    height: 85px !important;
    left: -5px;
    position: absolute;
    top: -5px;
    width: 85px !important;
    z-index: 1;
}
*/
</style>

<script>
ExpandOnHover.prototype.extend({
    
    _savedState: Control.property(),
    
    /*
     * The control's content.
     */
    content: Control.chain( "$ExpandOnHover_content", "content", function() {
        if ( this.inDocument() ) {
            this._recalc();
        }
    }),
    
    /*
     * The number of pixels the control should grow in each direction.
     */
    grow: Control.property.integer( null, 1 ),
    
    initialize: function() {
        
        this.genericIfClassIs( ExpandOnHover );
        
        var self = this;
        this
            .bind( "sizeChanged", function() {
                self._recalc();
            })
            .hover(
                function() { self._hoverIn(); },
                function() { self._hoverOut(); }
            )
            .inDocument( function( $control ) {
                $control._recalc();
            });
    },
    
    _hoverIn: function() {
        
        var hoverEffects = {
            height: "85px",
            left: "-5px",
            top: "-5px",
            width: "85px"
        };
        
        var currentState = this._getCurrentState( hoverEffects );
        this._savedState( currentState );
        
        this.$ExpandOnHover_content()
            .css( "position", "absolute")
            .css( hoverEffects );
    },
    
    _hoverOut: function() {
        var savedState = this._savedState() || {};
        this.$ExpandOnHover_content()
            .css( "position", "inherit" )
            .css( savedState );
    },
    
    _recalc: function() {
        this.height( this.$ExpandOnHover_content().outerHeight() );
        this.width( this.$ExpandOnHover_content().outerWidth() );
    },
    
    _getCurrentState: function( effects ) {
        var currentState = {};
        var $content = this.$ExpandOnHover_content();
        for ( var key in effects ) {
            var value;
            switch ( key ) {
                case "height":
                    value = $content.outerHeight() + "px";
                    break;
                case "width":
                    value = $content.outerWidth() + "px";
                    break;
                default:
                    value = $content.css( key );
                    break;
            }
            currentState[ key ] = value;
        }
        return currentState;
    }
    
});
</script>

</Control>
