<Control name="ExpandOnHover">

<content>
    <div id="ExpandOnHover_content"/>
</content>

<style>
{
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    position: relative;
}

#ExpandOnHover_content {
    /*
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    */
    position: relative;
}
</style>

<script>
ExpandOnHover.prototype.extend({
    
    _originalState: Control.property(),
    
    /*
     * The control's content.
     */
    content: Control.chain( "$ExpandOnHover_content", "content", function() {
        if ( this.inDocument() ) {
            this._recalc();
        }
    }),
    
    /*
     * The number of pixels the control should grow in each direction.
     */
    grow: Control.property.integer( null, 1 ),
    
    initialize: function() {
        
        this.genericIfClassIs( ExpandOnHover );

        this.hoverEffects({
            "background-color": "#ffffff",
            "border-color": "#ffd700",
            "height": "60px",
            "left": "-5px",
            "top": "-5px",
            "width": "60px"
        });
        
        var self = this;
        this
            .bind( "sizeChanged", function() {
                self._recalc();
            })
            .hover(
                function() { self._hoverIn(); },
                function() { self._hoverOut(); }
            )
            .inDocument( function( $control ) {
                $control
                    ._originalState( $control._getCurrentState() )
                    ._recalc();
            });
    },
    
    hoverEffects: Control.property(),
    
    _hoverIn: function() {
        
        //var currentState = this._getCurrentState( hoverEffects );
        //this._savedState( currentState );
        
        this.$ExpandOnHover_content()
            .stop()
            .css({
                "position": "absolute",
                "z-index": "2"
            })
            .animate( this.hoverEffects(), "fast" );
    },
    
    _hoverOut: function() {
        var savedState = this._originalState() || {};
        this.$ExpandOnHover_content()
            .stop()
            .css({
                "z-index": "1"
            })
            .animate( savedState, "fast", null, function() {
                $( this ).css({
                    "position": "inherit",
                    "z-index": "inherit"
                });
            });
    },
    
    _recalc: function() {
        this.height( this.$ExpandOnHover_content().outerHeight() );
        this.width( this.$ExpandOnHover_content().outerWidth() );
    },
    
    _getCurrentState: function() {
        var currentState = {};
        var $content = this.$ExpandOnHover_content();
        var effects = this.hoverEffects();
        for ( var key in effects ) {
            var value;
            switch ( key ) {
                case "border-color":
                    value = $content.css( "border-top-color" );
                    break;
                case "border-width":
                    value = $content.css( "border-top-width" );
                    break;
                /*
                case "height":
                    value = $content.outerHeight() + "px";
                    break;
                case "width":
                    value = $content.outerWidth() + "px";
                    break;
                */
                default:
                    value = $content.css( key );
                    break;
            }
            currentState[ key ] = value;
        }
        return currentState;
    }
    
});
</script>

</Control>
