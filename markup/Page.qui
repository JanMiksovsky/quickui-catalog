<!-- General base class for pages. -->

<Control className="Page" generic="true">

<style>
.Page.fill {
    height: 100%;
    margin: 0;
    padding: 0;
    position: absolute;
    width: 100%;
}
</style>

<script>
Page.prototype.extend({
    
    /*
     * True if the page should fill its container. Default is false.
     */
    fill: Control.chain( "applyClass/fill" ),

    initialize: function() {
        // Force a refresh of the page title. Subclasses may want to handle the
        // title specially (e.g., to reflect it as a heading on the page), and
        // this gives them a chance to do that.
        this.title( this.title() );
    },
    
    /*
     * The URL parameters for the current page. Read-only.
     */
    urlParameters: function() {
        return Page.urlParameters();
    },
        
    /*
     * The title of the page. This will generally be shown in the browser's
     * window title bar, etc.
     */
    title: function( title ) {
        if ( this[0] === document.body ) {
            // This page is the document, mirror the document's title.
            if ( title === undefined ) {
                return document.title;
            } else {
                document.title = title;
                return this;
            }
        } else {
            // This page is not (yet) the document, keep a private copy of the title.
            return this._title( title );
        }
    },

    // Private copy of the page's title.
    _title: Control.property()

});

/*
 * Class members.
 */
Page.extend({

    /*
     * Start actively tracking changes in a page specified on the URL.
     * For a URL like www.example.com/index.html#page=Foo, load class Foo.
     * If the page then navigates to www.example.com/index.html#page=Bar, this
     * will load class Bar in situ, without forcing the browser to reload the page. 
     */
    trackClassFromUrl: function( defaultPageClass, target ) {
        
        var $control = Control( target || "body" );
        
        // Watch for changes in the URL after the hash.
        $( window ).hashchange( function() {
            var pageClass = Page.urlParameters().page || defaultPageClass;
            $control.transmute( pageClass );
        })
            
        // Trigger a page class load now.
        $( window ).hashchange();
    },
    
    /*
     * Return the URL parameters (after "&" and/or "#") as a JavaScript object.
     * E.g., if the URL looks like http://www.example.com/index.html?foo=hello&bar=world
     * then this returns the object
     *
     *    { foo: "hello", bar: "world" }
     *
     */
    urlParameters: function() {
        var regex = /[?#&](\w+)=([^?#&]*)/g;
        var results = {};
        var match = regex.exec( window.location.href );
        while (match != null) {
            var parameterName = match[1];
            var parameterValue = match[2];
            results[ parameterName ] = parameterValue;
            match = regex.exec( window.location.href );
        }
        return results;
    }    
    
});

/*
 * General utility functions made available to all controls.
 */
Control.prototype.extend({
    
    // Look up the page hosting a control.
    page: function() {
        // Get the containing DOM element subclassing Page that contains the element
        var pages = this.closest( ".Page" );
        
        // From the DOM element, get the associated QuickUI control.
        return ( pages.length > 0 ) ? pages.control() : null;
    }
    
});
</script>

</Control>
