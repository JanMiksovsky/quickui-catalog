<!--
A polyconstrainHeight (shim) supporting the CSS flexible box layout model on newer browsers
and emulating some very basic aspects of that layout model on older browsers.

As of 3/12/12, Mozilla's flexbox support is too flaky to use. Among other
things, if the CSS position is set to absolute, Mozilla will report "display"
as "block" instead of "-moz-box" as expected, which makes it hard to tell
whether flexbox is even supported. Forcing the use of flexbox reveals more
bugs; it's just not worth using at this point.
-->
 
<Control className="SimpleFlexBox">

<content>
    <div ref="SimpleFlexBox_panel1" class="panel" />
    <div ref="SimpleFlexBox_content" />
    <div ref="SimpleFlexBox_panel2" class="panel" />
</content>

<style>
{
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    /* display: -moz-box; */
    display: -webkit-box;
    display: box;
}

> * {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    position: relative; /* So elements contained by panels can fill panels. */
}

.SimpleFlexBox_content {
    /* -moz-box-flex: 1; */
    -webkit-box-flex: 1;
    box-flex: 1;
}

.SimpleFlexBox.horizontal {
    /* -moz-box-orient: horizontal; */
    -webkit-box-orient: horizontal;
    box-orient: horizontal;
}

.SimpleFlexBox.vertical {
    /* -moz-box-orient: vertical; */
    -webkit-box-orient: vertical;
    box-orient: vertical;
}

.SimpleFlexBox.constrainHeight {
    /* This can be overridden, but seems like a useful default. */
    height: 100%;
}

/* noFlexBox will be applied where flexbox is unsupported or known to be buggy. */
.SimpleFlexBox.noFlexBox {
    position: relative;
}
.SimpleFlexBox.noFlexBox.horizontal {
    display: table;
    width: 100%;
}
.SimpleFlexBox.noFlexBox.horizontal > * {
    display: table-cell;
    vertical-align: top;
}
.SimpleFlexBox.noFlexBox.horizontal > .panel {
    width: 0;   /* Forces panel to its minimum width; not actually zero width. */
    /*
     * In Mozilla, the contents of the main content panel end up wider than the
     * content panel itself (likely an issue with using position: absolute
     * within a table cell). This can cause the side panels to end up behind the
     * main panel, rendering the contents of the side panels inaccessible. So,
     * try to force the side panels on top of the main panel.
     */
    z-index: 1;
}

.SimpleFlexBox.noFlexBox.constrainHeight {
    display: inherit;
}
.SimpleFlexBox.noFlexBox.constrainHeight > * {
    display: inherit; 
    position: absolute;
    vertical-align: inherit;
}
.SimpleFlexBox.noFlexBox.constrainHeight > .panel {
    width: auto;
}
</style>

<script>
SimpleFlexBox.prototype.extend({
    
    /*
     * The content of the main center panel.
     */
    content: Control.chain( "$SimpleFlexBox_content", "content" ),

    /*
     * Set this to true if you have styled the control to constrain its
     * height, e.g., with absolute positioning or a hard pixel height. 
     * (Unfortunately, there doesn't seem to be a way to programmatically
     * determine whether the control has had its height styled.) The default
     * is false.
     */
    constrainHeight: Control.chain( "applyClass/constrainHeight", function() {
        if ( !this._checkFlexBox() ) {
            this.trigger( "layout" );
        }
    }),
    
    initialize: function() {
        this.inDocument( function() {
            this._checkFlexBox();
        });
    },
    
    /*
     * The orientation of the panels: "horizontal" or "vertical".
     */
    orient: Control.property( function( orient ) {
        var vertical = this._vertical();
        this.toggleClass( "horizontal", !vertical );
        this.toggleClass( "vertical", vertical );
        this._checkFlexBox();
    }, "horizontal"),
    
    /*
     * See if we can use the CSS flexible layout module (preferred), whether
     * we can use other flexbox-less styling for layout, or whether we need to
     * do manual layout. For the latter, start a layout event handler.
     * Return true if we're using flexbox, false if not.  
     */
    _checkFlexBox: function() {
        
        if ( !this.inDocument() ) {
            /*
             * Detection of flexbox support requires styles, which means the
             * control has to be in the DOM.
             */
             return false;
        }

        var flexBox = SimpleFlexBox.usingFlexBox( this );
        var constrainHeight = this.constrainHeight();
        
        /*
         * WebKit has a bug preventing use of overflow: auto in combination with
         * -webkit-box-orient: horizontal, which will often come up when
         * constraining height.
         * See http://code.google.com/p/chromium/issues/detail?id=118004.
         * Until that gets fixed, we disable flexbox support on WebKit for
         * horizontal orientation and constrained height.
         */
        if ( $.browser.webkit && !this._vertical() && constrainHeight ) {
            flexBox = false;
        }

        /*
         * We have to set the noFlexBox class before the layout event handler
         * gets bound; binding forces an initial layout handler call, which will
         * need the noFlexBox class to be applied in order to calculate the
         * layout properly.
         */
        this._usingFlexBox( flexBox );
        this._childrenCheckSize();
        
        // Handle the layout events as needed.
        var handlingLayout = this._handlingLayout();
        var needLayout = !flexBox && constrainHeight;
        if ( needLayout && !handlingLayout ) {
            var self = this;
            this.on( "layout sizeChanged", function() {
                self._layout();
            });
            this._handlingLayout( true );
        } else if ( !needLayout && handlingLayout ) {
            this.off( "layout sizeChanged" );
            this._handlingLayout( false );
        }
        
        return flexBox;
    },
    
    /*
     * Simulate flex behavior for the main content panel when the height
     * is constrained.
     */
    _layout: function() {

        var vertical = this._vertical();
        var measureFn = vertical ? $.prototype.outerHeight : $.prototype.outerWidth;
        var sizePanel1 = measureFn.call( this.$SimpleFlexBox_panel1(), true );
        var sizePanel2 = measureFn.call( this.$SimpleFlexBox_panel2(), true );
        var css = vertical
            ? {
                bottom: sizePanel2, 
                top: sizePanel1
            }
            : {
                left: sizePanel1,
                right: sizePanel2
            };
        this.$SimpleFlexBox_content().css( css );

        this._childrenCheckSize();
    },

    /*
     * If the layout of the control changes in any way, the subcontrols
     * contained in the panels should check to see if they've changed size.
     */
    _childrenCheckSize: function() {
        var $controls = this.children().children().control();
        if ( $controls != null ) {
            $controls.checkForSizeChange();
        }
    },
    
    /*
     * True if we're currently handling the layout event to do manual layout.
     */
    _handlingLayout: Control.property.bool( null, false ),
    
    /*
     * The content of the first docked panel.
     */    
    _panel1: Control.chain( "$SimpleFlexBox_panel1", "content", function() {
        if ( !this._usingFlexBox() ) {
            this.$SimpleFlexBox_panel1().checkForSizeChange();
        }
    }),
    
    /*
     * The content of the second docked.
     */
    _panel2: Control.chain( "$SimpleFlexBox_panel2", "content", function() {
        if ( !this._usingFlexBox() ) {
            this.$SimpleFlexBox_panel2().checkForSizeChange();
        }
    }),

    /*
     * True if the control is currently using CSS flexible box layout, and
     * false if using manual layout.
     */
    _usingFlexBox: function( usingFlexBox ) {
        if ( usingFlexBox === undefined ) {
            return !this.hasClass( "noFlexBox" );
        } else {
            return this.toggleClass( "noFlexBox", !usingFlexBox );
        }
    },
    
    // Return true if we're using vertical orientation, false if not.
    _vertical: function() {
        return ( this.orient() === "vertical" );
    }
    
});

/* Class methods */
SimpleFlexBox.extend({

    /*
     * Returns true if the given element is using the CSS flexible layout module.
     */
    usingFlexBox: function( $element ) {
        var flexBoxVariants = [
            "box",
            /* "-moz-box", */
            "-webkit-box"
        ];
        return $.inArray( $element.css( "display" ), flexBoxVariants ) >= 0;
    }

});
</script>

</Control>
