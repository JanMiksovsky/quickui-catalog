<!--
A message which briefly appears on a page before automatically disappearing. 
-->

<Control className="TransientMessage" generic="true">

<style>
/* Generic appearance */
.TransientMessage.generic {
    background: #444; /* IE8 */
    background: rgba( 0, 0, 0, 0.5 );
    border-color: white;
    border-top-style: none;
    color: white;
    padding: .75em;
    position: fixed;
    top: 0;
}
</style>

<script>
TransientMessage.prototype.extend({

    /*
     * Close display of the message normally.
     */
    close: function() {
        var self = this;
        this.fadeOut( null, function() {
            self._close();
        });
        return this;
    },
    
    /*
     * The time before the message begins to fade out.
     * 
     * If undefined (the default value), the duration will be calculated from
     * the length of the message. If negative, the message will not
     * automatically be closed, but can be closed by invoking close().
     */
    duration: Control.property(),
    
    initialize: function() {
        var self = this;
        this.click( function() {
            self._close();
        });
    },

    /*
     * Show the message.
     */    
    open: function() {
        
        var duration = this.duration();
        if ( !duration ) {
            var content = this.content();
            var length = ( typeof content === "string" )
                ? content.length
                : $( content ).text().length;
            duration = 750 + ( length * 20 );
        }
        
        if ( duration >= 0 ) {
            var self = this;
            var timeout = setTimeout( function() {
                self.close();
            }, duration );
            this._timeout( timeout );
        }
        
        this
            .positionMessage()
            .fadeIn(); // TODO: Investigate why this doesn't actually fade in.
        
        return this;
    },
    
    /*
     * Position the message. By default, this is center-aligned at the top
     * of the page.
     */
    positionMessage: function() {
        return this.css({
            left: ( $( window ).width() - this.outerWidth() ) / 2
        });
    },

    _close: function() {
        var timeout = this._timeout();
        if ( timeout) {
            clearTimeout( timeout );
            this._timeout( null );
        }
        this.remove();
    },
    
    _timeout: Control.property()
    
});

/* Class methods */
TransientMessage.extend({
    
    /*
     * Show the given content for the indicated (optional) duration.
     */
    showMessage: function( content, duration ) {
        
        var transientMessage = TransientMessage.create();
        if ( content ) {
            transientMessage.content( content );
        }
        if ( duration ) {
            transientMessage.duration( duration );
        }
        
        $( document.body )
            .append( transientMessage );
        transientMessage.open();
        
        return transientMessage;
    },
    
});
</script>

</Control>
