<!--
Display children as controls on a sliding horizontal strip; only one page
is visible at a time. The strip can be programmatically slid left and right.
-->
<Control className="SlidingPages">

<prototype>
    <Sequence>
        <div ref="SlidingPages_content"/>
    </Sequence>
</prototype>

<style>
{
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    overflow: hidden;
    width: 0; /* Prevent anything from appearing until we've set width. */
}

.SlidingPages_content {
    position: relative; /* So we can shift it over */
    -webkit-transition: 0.2s;
    transition: 0.2s; /* Same as jQuery's "fast" */
    white-space: nowrap;
}
.SlidingPages_content > * {
    display: inline-block;
}
</style>

<script>
SlidingPages.prototype.extend({
    
    /*
     * The index of the page currently being shown.
     */
    activeIndex: function( activeIndex ) {
        var result = this._super( activeIndex );
        if ( activeIndex !== undefined ) {
            var page = this.controls().eq( activeIndex );
            if ( page.length > 0 ) {
                var left = page.position().left;
                if ( SlidingPages.hasTransitions( this.$SlidingPages_content() ) ) {
                    // Use CSS animation.
                    this.$SlidingPages_content().css( "left", -left );
                }
                else {
                    // Fall back to jQuery animation.
                    this.$SlidingPages_content().animate({
                        "left": -left
                    }, "fast" );
                }
            }            
        }
        return result;
    },

    /*
     * The array of elements in the sequence; only one will be shown at a time.
     * 
     * If the set changes, this will attempt to preserve the one that was
     * previously active. Otherwise, the first element is made active.
     */
    content: function( content ) {
        var result = this._super( content );
        if ( content !== undefined ) {
            this._adjustWidths();
        }
        return result;
    },
    
    initialize: function() {
        var self = this;
        this
            .inDocument( function() {
                this._adjustWidths();
            })
            .on( "layout sizeChanged", function() {
                self._adjustWidths();
            });
    },
    
    // Force all controls and the control itself to the maximium width of the controls.
    _adjustWidths: function() {

        var controls = this.controls();
        if ( controls.length === 0 ) {
            return;
        }
        
        var pageWidths = controls.map( function( index, page ) {
            return $( page ).width();
        }).get();
        var maxPageWidth = Math.max.apply( this, pageWidths );
        if ( maxPageWidth > 0 ) {
            controls.width( maxPageWidth );
        }

        var pageOuterWidths = controls.map( function( index, page ) {
            return $( page ).outerWidth( true );
        }).get();
        var maxPageOuterWidth = Math.max.apply( this, pageOuterWidths );
        if ( maxPageOuterWidth > 0 ) {
            this.width( maxPageOuterWidth );
        }
    },

    _container: Control.chain( "$SlidingPages_content" )
    
});

/*
 * Class methods
 */
SlidingPages.extend({

    /*
     * Returns true if the given element has CSS transitions applied to it.
     */
    hasTransitions: function( $element ) {
        transitionProperties = [
            "-webkit-transition",
            "transition"
        ];
        // HACK for IE8, in which jQuery 1.7.2 will throw an exception if we
        // try to get the css("transition") property.
        if ( $.browser.msie && parseInt( $.browser.version ) < 9 ) {
            return false;
        }
        for ( var i = 0; i < transitionProperties.length; i++ ) {
            var value = $element.css( transitionProperties[i] );
            if ( value !== undefined && value !== "" ) {
                return true;
            }
        }
        return false;
    }

})
</script>

</Control>
