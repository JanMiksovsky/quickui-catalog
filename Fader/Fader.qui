<!--
Fades its content to the background color on the right/bottom edge if the
content is too long. Must set explicitly set the control's background-color
if the color is not white. 
-->

<Control name="Fader">

<content>
    <div id="Fader_content"/>
    <Gradient id="gradient" direction="horizontal" />
</content>

<style>
{
    background-color: #ffffff;
    overflow: hidden;
    position: relative;
    white-space: nowrap;
}

#gradient {
    position: absolute;
    height: 100%;
    right: 0;
    top: 0;
    width: 1.5em;
}

.Fader.vertical #gradient {
    right: auto;
    bottom: 0;
    height: 1.5em;
    top: auto;
    width: 100%;
}
</style>

<script>
Control.prototype.extend({
    
});

Fader.prototype.extend({
    
    content: Control.chain("$Fader_content", "content"),
    
    initialize: function() {
        var self = this;
        this.insertedIntoDocument(function() {
            self.redraw();
        });
    },
    
    direction: Control.property(function(direction) {
        this
            .toggleClass("vertical", direction !== "horizontal")
            .redraw()
            .$gradient()
                .direction(direction);
    }),
    
    redraw: function() {
        var self = this;
        return this.eachControl(function(index, $control) {
            var backgroundColor = $control.css("background-color");
            var backgroundHex = (backgroundColor.substr(0, 3).toLowerCase() == "rgb")
                                    ? self._rgbStringToHexColor(backgroundColor)
                                    : backgroundColor;
            $control.$gradient()
                .start(backgroundHex + "00")
                .end(backgroundHex);
        });
    },
    
    _rgbStringToHexColor: function(rgbString) {
        rgb = rgbString.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
        return "#" + this._hexByte(rgb[1]) + this._hexByte(rgb[2]) + this._hexByte(rgb[3]);
    },

    _hexByte: function(n) {
        var s = (new Number(n & 0xFF)).toString(16);
        if (s.length == 1)
        {
            s = "0" + s;
        }
        return s;
    }
    
});
</script>

</Control>
