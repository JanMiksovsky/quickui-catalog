<!--
Fades its content to the background color on the right/bottom edge if the
content is too long. Must set explicitly set the control's background-color
if the color is not white. 
-->

<Control name="Fader">

<content>
    <div id="Fader_content"/>
    <Gradient id="gradient" direction="horizontal" />
</content>

<style>
{
    background-color: #ffffff;
    overflow: hidden;
    position: relative;
    white-space: nowrap;
}

#gradient {
    position: absolute;
    height: 100%;
    right: 0;
    top: 0;
    width: 1.5em;
}

.Fader.vertical #gradient {
    right: auto;
    bottom: 0;
    height: 1.5em;
    top: auto;
    width: 100%;
}
</style>

<script>
Control.prototype.extend({
    
});

Fader.prototype.extend({
    
    content: Control.chain( "$Fader_content", "content" ),
    
    initialize: function() {
        this.inDocument( function( $control ) {
            $control._redraw();
        });
    },
    
    direction: Control.property( function( direction ) {
        this
            .toggleClass( "vertical", direction !== "horizontal" )
            ._redraw()
            .$gradient()
                .direction(direction);
    }),
    
    // Expand a color like #abc into #aabbcc.
    _expandShortHexValue: function( s ) {
        var shortHex = s.slice( 1 ); // Remove "#"
        var longHex = "";
        for ( var i = 0; i < shortHex.length; i++ ) {
            var c = shortHex[i];
            longHex += c + c;
        }
        return "#" + longHex;
    },

    _hexByte: function( n ) {
        var s = ( new Number( n & 0xFF ) ).toString( 16 );
        if ( s.length === 1 )
        {
            s = "0" + s;
        }
        return s;
    },
    
    _redraw: Control.iterator( function() {
        var backgroundColor = this.css("background-color");
        var backgroundHex = ( backgroundColor.length === 4 )
            ? this._expandShortHexValue( backgroundColor ) 
            : ( backgroundColor.substr( 0, 3 ).toLowerCase() === "rgb" )
                ? this._rgbStringToHexColor( backgroundColor )
                : backgroundColor;
        this.$gradient()
            .start( backgroundHex + "00" )
            .end( backgroundHex );
    }),
    
    _rgbStringToHexColor: function( rgbString ) {
        rgb = rgbString.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
        return "#"
            + this._hexByte( rgb[1] )
            + this._hexByte( rgb[2] )
            + this._hexByte( rgb[3] );
    }
    
});
</script>

</Control>
