<!--
Display children as pages on a sliding horizontal strip; only one page
is visible at a time. The strip can be programmatically slid left and right.
-->
<Control className="SlidingPages">

<content>
    <div ref="SlidingPages_content"/>
</content>

<style>
{
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    overflow: hidden;
    width: 0; /* Prevent anything from appearing until we've set width. */
}

.SlidingPages_content {
    position: relative; /* So we can shift it over */
    white-space: nowrap;
}
.SlidingPages_content > * {
    display: inline-block;
}
</style>

<script>
SlidingPages.prototype.extend({
    
    /*
     * The index of the page currently being shown.
     */
    activeIndex: Control.property.integer( function( activeIndex ) {
        var page = this.pages().eq( activeIndex );
        if ( page.length > 0 ) {
            var left = page.position().left;
            this.$SlidingPages_content().animate({
                "left": -left
            }, "fast" );
            this.trigger( "activeChildChanged" );
        }
    }),

    /*
     * The array of elements to use as pages.
     */
    content: Control.chain( "$SlidingPages_content", "content", function() {
        this._adjustWidths();
    }),
    
    initialize: function() {

        var self = this;
        this
            .inDocument( function() {
                this._adjustWidths();
            })
            .on( "layout sizeChanged", function() {
                self._adjustWidths();
            });

        if ( !this.activeIndex() ) {
            this.activeIndex(0);
        }
    },

    /*
     * Show the next child. If the last child is currently shown, this has no
     * effect.
     */
    next: Control.iterator( function() {
        var index = this.activeIndex();
        if ( index < this.pages().length - 1 ) {
            this.activeIndex( index + 1 );
        }
    }),
    
    pages: Control.chain( "$SlidingPages_content", "children" ),

    /*
     * Show the previous child. If the first child is currently shown, this has
     * no effect.
     */
    previous: Control.iterator( function() {
        var index = this.activeIndex();
        if ( index > 0 ) {
            this.activeIndex( index - 1 );
        }
    }),
    
    // Force all pages and the control itself to the maximium width of the pages.
    _adjustWidths: function() {

        var pages = this.pages();
        if ( pages.length === 0 ) {
            return;
        }
        
        var pageWidths = pages.map( function( index, page ) {
            return $( page ).width();
        }).get();
        var maxPageWidth = Math.max.apply( this, pageWidths );
        if ( maxPageWidth > 0 ) {
            pages.width( maxPageWidth );
        }

        var pageOuterWidths = pages.map( function( index, page ) {
            return $( page ).outerWidth( true );
        }).get();
        var maxPageOuterWidth = Math.max.apply( this, pageOuterWidths );
        if ( maxPageOuterWidth > 0 ) {
            this.width( maxPageOuterWidth );
        }
    }
    
});
</script>

</Control>
