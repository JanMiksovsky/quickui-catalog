<!--
A labeled radio button.
-->

<Control className="RadioButton">

<prototype>
    <LabeledInput _type="radio"/>
</prototype>

<script>
RadioButton.prototype.extend({
    
    /*
     * True if the control should automatically select a name() property value
     * if no name is specified. This automatic name will match the name of other
     * autonamed sibling radio buttons, allowing them to work as a radio button
     * group without the need for an explicit name.
     */
    autoName: Control.property.bool( null, true, function() {
        this._checkName();
    }),
    
    initialize: function() {
        this._super();
        this.inDocument( function() {
            this._checkName();
        });
    },
    
    /*
     * The text name of the radio button group.
     * 
     * You can set the name() of all radio buttons in the same group to the same
     * value to ensure the radio buttons are mutually exclusive. Alternatively,
     * you can rely on the autoName() property to automatically select a name
     * which will group the control with auto-named sibiling radio buttons.
     */
    name: Control.chain( "$input", "prop/name", function() {
        this._checkName();
    }),
    
    _checkName: function() {
        if ( this.inDocument() && this.autoName() && !this.name() ) {
            /*
             * Pick a name.
             * First look for an autonamed sibling.
             */
            var named;
            this.siblings().eachControl( function( index, control ) {
                if ( control instanceof RadioButton
                    && control.autoName()
                    && control.name() ) {
                    named = control;
                    return false;
                }
            });
            var name = named
                ? named.name()  /* Use sibling's name. */
                : RadioButton.generateUniqueName(); /* Generate a name. */
            this.name( name );
        }
    }
});

/* Class members */
RadioButton.extend({
    
    generateUniqueName: function() {
        return "_group" + this._count++;
    },
    
    _count: 0
    
});
</script>

</Control>
