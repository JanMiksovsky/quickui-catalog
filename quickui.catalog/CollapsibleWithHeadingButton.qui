<!--
A collapsible panel whose heading region, by default, includes a button on
the far right that indicates the panel's collapsed/expanded state.
-->

<Control className="CollapsibleWithHeadingButton">

<prototype>
    <Collapsible>
        <heading>
            <BasicButton ref="headingButton">
                <div ref="collapsedButtonContent">+</div>
                <div ref="expandedButtonContent">âˆ’</div> <!-- Minus sign, not hyphen -->
            </BasicButton>
            <Fader ref="CollapsibleWithHeadingButton_heading"/>
        </heading>
    </Collapsible>
</prototype>

<style>
.headingButton {
    float: right;
}

.Collapsible_content {
    clear: both;
}

.collapsedButtonContent {
    display: none;
}
.expandedButtonContent {
    display: block;
}
.CollapsibleWithHeadingButton.collapsed .collapsedButtonContent {
    display: block;
}
.CollapsibleWithHeadingButton.collapsed .expandedButtonContent {
    display: none;
}

/* Generic appearance */
.CollapsibleWithHeadingButton.generic .CollapsibleWithHeadingButton_heading {
    background: #e5e5e5;    /* Fader requires explicit background color. */
}

.CollapsibleWithHeadingButton.generic .headingButton {
    font-weight: normal;
    margin-left: 1em;
}

.CollapsibleWithHeadingButton.generic .headingButton.BasicButton.generic {
    padding: 0 0.25em;
}
</style>

<script>
CollapsibleWithHeadingButton.prototype.extend({
    
    /*
     * The class of the heading button.
     */
    buttonClass: Control.chain( "$headingButton", "transmute" ),
    
    /*
     * The content of the heading button when the panel is collapsed.
     */
    collapsedButtonContent: Control.chain( "$collapsedButtonContent", "content" ), 
    
    /*
     * The content of the heading button when the panel is expanded.
     */
    expandedButtonContent: Control.chain( "$expandedButtonContent", "content" ),
    
    /*
     * The heading shown at the top of the panel.
     */
    heading: Control.chain( "$CollapsibleWithHeadingButton_heading", "content" ),
    
    initialize: function() {
        this._super();
        this.genericIfClassIs( CollapsibleWithHeadingButton );
        
        var $button = this.$headingButton();
        this.$Collapsible_heading().hover(
            function hoverIn() { $button.addClass( "hovered" ); },
            function hoverOut() { $button.removeClass( "hovered" ); }
        );
    }
    
});
</script>

</Control>
