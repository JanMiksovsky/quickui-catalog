<!-- A text box that shows a "hint" as to what the user should enter. -->

<Control className="HintTextBox" genericDefault="true">

<content>
    <input ref="HintTextBox_textBox" type="text"/>
    <div ref="HintTextBox_hint"/>
</content>

<style>

{
    cursor: text;
    display: inline-block;
    position: relative;
}

.HintTextBox_textBox {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    font-size: 1em;
    width: 100%;
}

.HintTextBox_hint {
    bottom: 0;
    left: 4px;
    height: 1.25em;
    margin: auto 0;
    position: absolute;
    overflow: hidden;
    right: 4px;
    top: 0;
}

/* Generic appearance */
.HintTextBox.generic .HintTextBox_hint {
    color: #aaa;
}
</style>

<script>
HintTextBox.prototype.extend({
    
    /*
     * The content of the text box.
     */
    content: Control.chain( "$HintTextBox_textBox", "content", function() {
        this._showHintIfEmpty();
    }),
    
    /*
     * The "hint" shown within the text box that suggests what the user should
     * type there. This hint is hidden if: the text box has content, the
     * text box has just acquired the keyboard focus, or if the user clicks in
     * the text box. 
     */
    hint: Control.chain( "$HintTextBox_hint", "content" ),
    
    initialize: function() {
        var self = this;
        this.on({
            "click": function() { self._hideHint(); },
            "focus": function() {
                if ( !self._isTextBoxFocused() )
                {
                    self.$HintTextBox_textBox().focus();
                }
            }
        });
        this.$HintTextBox_textBox().on({
            blur: function() {
                self
                    ._isTextBoxFocused( false )
                    ._showHintIfEmpty();
            },
            focus: function() { self._isTextBoxFocused( true ); },
            keydown: function( event ) { self._handleKeydown( event ); },
            keyup: function() { self._showHintIfEmpty(); }
        });
        this.$HintTextBox_hint().click( function() {
            self._hideHint();
        });
    },
    
    _isTextBoxFocused: Control.property( null, false ),
    
    /*
     * The keydown event comes before the browser has processed it, so we can't
     * tell at this point for sure what the final text is. However, we can
     * speculate as to whether the result of the key will add or remove text.
     * Most keys will add a character to the text box, in which case we'll end
     * up removing the hint; rather than waiting for keyup to check whether the
     * text is non-empty, we'll hide the hint now. In special cases, we defer
     * hiding the hint until the keyup event, when we can check the final text
     * that includes the result of the key.
     */
    _handleKeydown: function( event ) {
        var keysOfUnknownEffect = [
            8,  // Backspace
            9,  // Tab
            16, // Shift
            17, // Ctrl
            18, // Alt
            19, // Pause/Break
            20, // Caps Lock
            27, // Esc
            33, // Page Up
            34, // Page Down
            35, // End
            36, // Home
            37, // Left
            38, // Up
            39, // Right
            40, // Down
            45, // Insert
            46, // Delete
            91, // Windows
            93, // Context menu
            144, // Num lock
            145, // Scroll lock
            182, // Computer
            183, // Calculator
        ];
        if ( $.inArray( event.which, keysOfUnknownEffect ) < 0 ) {
            // Probably a text key. Preemptively hide the hint.
            this.$HintTextBox_hint().hide();
        }
    },
    
    _hideHint: function() {
        this.$HintTextBox_hint().hide();
        this.$HintTextBox_textBox().focus();
    },
    
    /*
     * This routine is a more careful check to see whether we should show the
     * hint or not. We can call this on blur or keyup (when, unlike keydown,
     * the final state of the text is known).
     */
    _showHintIfEmpty: function() {
        this.$HintTextBox_hint().toggle( this.content().length === 0 );
    }
    
});
</script>

</Control>
