<!-- A text region that can be clicked to edit its contents. -->

<Control className="EditableTextBox">

<prototype>
	<Editable editClass="TextBox"/>
</prototype>

<style>
/* Generic appearance */

/*
 * Assuming the read portion is just a div, and the edit portion has some
 * input, try to match the standard border and padding of input elements so that
 * contents don't appear to shift position when changing the editing state.
 */
.EditableTextBox.generic .Editable_read {
    border: 2px solid transparent;
    cursor: text;
    margin: 0;
    min-height: 2em; /* So user can still click on it if it's empty. */
    padding: 1px;
}

.EditableTextBox.generic .Editable_edit {
	margin: 0;
}
</style>

<script>
EditableTextBox.prototype.extend({

	/*
	 * True if the pressing Escape in edit mode cancels edit mode.
	 * The default is true.
	 */
	cancelOnEscape: Control.property( null, true ),

	editing: function( editing ) {
		result = this._super( editing );
		if ( editing ) {
			// Switching to edit mode; put focus in the text box.
			this.editControl().find( "input" ).andSelf().focus();
		}
		return result;
	},

    /*
     * True if the control should switch to editing mode when it's clicked.
     * Default is true.
     */
    editOnClick: Control.property( null, true ),

    initialize: function() {
        var self = this;
        this.on({
        	click: function() {
	            if ( self.editOnClick() && !self.editing() ) {
	                self.editing( true );
	            }
            }
        });
    },

    /*
     * True if pressing the Enter key in edit mode saves changes and switches
     * back to read mode. The default is true.
     */
    saveOnEnter: Control.property( null, true ),

    _createEditControl: function() {
    	var result = this._super();

        // Wire up events bound to input elements.
    	var self = this;
        this.editControl().find( "input" ).andSelf().on({
            blur: function() {
                if ( self.editing() ) {
                    // Implicitly save when control loses focus.
                    self.save();
                }
            },
            keydown: function( event ) {
                if ( self.editing() ) {
                    switch ( event.which ) {
                        case 13: // Enter
                            if ( self.saveOnEnter() ) {
                                self.save();
                                event.preventDefault();
                            }
                            break;
                        case 27: // Escape
                            if ( self.cancelOnEscape() ) {
                                self.cancel();
                            }
                            break;
                    }
                }
            }
        });

        return result;
    }

});
</script>

</Control>