<Control className="Menu">

<content>
    <div id="Menu_description"/>
    <div id="shield"/> <!-- Used to obscure borders between description and content. -->
    <div id="Menu_content"/>
</content>

<style>
{
    cursor: default;
    display: inline-block;
    position: relative;
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    user-select: none;
}

#Menu_content {
    display: none;
    position: absolute;
}
.Menu.opened #Menu_content {
    display: inherit;
}

#shield {
    display: none; /* Don't show this unless it's asked for. */
    position: absolute;
    z-index: 1;
}

/* Generic appearance */
.Menu.generic {
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

.Menu.generic #Menu_description {
    border: 1px solid transparent;
    padding: 0.5em;
}
#Menu_description:hover {
    background: #eee;
}

.Menu.generic #shield {
    background: white;  /* Same as menu's background color */
    height: 1px;        /* Same as this menu's border-top-width */
    left: 1px;          /* Same as this menu's border-left-width */
}

.Menu.generic #Menu_content {
    background: white;
    border: 1px solid #ccc; /* IE8 */
    border: 1px solid rgba(0, 0, 0, 0.2);
    -webkit-box-shadow: 0 2px 4px rgba( 0, 0, 0, 0.2 );
    -moz-box-shadow: 0 2px 4px rgba( 0, 0, 0, 0.2 );
    box-shadow: 0 2px 4px rgba( 0, 0, 0, 0.2 );
    cursor: default;
    margin: 0;
    outline: none;
    padding: 0.5em 0;
}

.Menu.opened #shield {
    display: block;
}

.Menu.opened #Menu_description {
    background: white;
    border-color: #ccc; /* IE8 */
    border-color: rgba(0, 0, 0, 0.2);
    border-bottom-style: none;
}
</style>

<script>
Menu.prototype.extend({
    
    /*
     * Close the menu. This generates a menuClosed event. Calling this when the
     * menu is already closed has no effect.
     */
    close: Control.iterator( function() {
        
        if ( !this.opened() ) {
            // Already closed
            return this;
        }
        
        // Tear down event handlers.
        $( document ).off({
            click: this._documentClickHandler(),
            keydown: this._documentKeydownHandler()
        });
        $( window ).off( "blur", this._windowBlurHandler() );
        
        return this
            ._documentClickHandler( null )
            ._documentKeydownHandler( null )
            ._windowBlurHandler( null )
            .opened( false )
            .trigger( "menuClosed" );
    }),
    
    /*
     * The content that appears when the menu is open.
     */
    content: Control.chain( "$Menu_content", "content" ),
    
    /*
     * The menu's descriptive label. Clicking this will open the menu.
     */
    description: Control.chain( "$Menu_description", "content", function() {
        if ( this.inDocument() ) {
            this._updateShield();
        }
    }),
     
    initialize: function() {
        
        this._super();
        this.genericIfClassIs( Menu );
        
        var self = this;
        this
            .click( function( event ) {
                if ( self.opened() ) {
                    self.close();
                } else {
                    self.open();
                }
                event.stopPropagation();
            })
            .inDocument( function() {
                this._updateShield();
            });
    },
    
    /*
     * Returns true if the menu is currently open.
     */
    opened: Control.chain( "applyClass/opened" ),
    
    /*
     * Open the menu. This triggers a menuOpened event. Calling this when the
     * menu is already opened has no effect.
     */
    open: Control.iterator( function() {
        
        if ( this.opened() ) {
            // Already open;
        }
        
        // Wire up events.
        // We save references to the handlers so we can unbind them later.
        var self = this;
        var documentKeydownHandler = function( event ) {
            // Pressing ESC closes menu. */
            if ( event.which === 27 /* Escape */ ) {
                self.close();
                event.stopPropagation();
            }
        };
        var documentClickHandler = function( event ) {
            // If user clicked outside this menu, close it.
            var outsideClick = ( $( event.target ).parents().filter( self ).length === 0 );
            if ( outsideClick ) {
                self.close();
            }
        };
        var windowBlurHandler = function( event ) {
            // Close any open menus on blur.
            self.close();
        };
                        
        $( document ).on({
            click: documentClickHandler,
            keydown: documentKeydownHandler
        });
        $( window ).on( "blur", windowBlurHandler );
                        
        return this
            ._documentClickHandler( documentClickHandler )
            ._documentKeydownHandler( documentKeydownHandler )
            ._windowBlurHandler( windowBlurHandler )
            .opened( true )
            .trigger( "menuOpened" );
    }),
    
    // Handler for the document click event
    _documentClickHandler: Control.property(),

    // Handler for the keydown event
    _documentKeydownHandler: Control.property(),
    
    /*
     * The "shield" is a thin block that can be used to obscure the boundary
     * between the description and content so that those two elements can
     * appear to exist on a seamless surface. For this to work, the shield
     * needs to be (almost) as wide as the description. 
     */
    _updateShield: function() {
        // We want the width of the description including padding, but not
        // including border.
        var $description = this.$Menu_description();
        var shieldWidth = $description.width()
            + parseInt( $description.css( "padding-left" ) )
            + parseInt( $description.css( "padding-right" ) );
        this.$shield().width( shieldWidth );
    },
    
    // Handler for the window blur event
    _windowBlurHandler: Control.property()
    
});
</script>

</Control>
