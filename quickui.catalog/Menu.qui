<Control className="Menu">

<content>
    <div id="Menu_description"/>
    <div id="shield"/>
    <div id="Menu_content"/>
</content>

<style>
{
    cursor: default;
    display: inline-block;
    position: relative;
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    user-select: none;
}

#Menu_content {
    display: none;
    position: absolute;
}
.Menu.open #Menu_content {
    display: inherit;
}

#shield {
    display: none; /* Don't show this unless it's asked for. */
    position: absolute;
    z-index: 1;
}

/* Generic appearance */
.Menu.generic {
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

.Menu.generic #Menu_description {
    border: 1px solid transparent;
    padding: 0.5em;
}
#Menu_description:hover {
    background: #eee;
}

.Menu.generic #shield {
    background: white;  /* Same as menu's background color */
    height: 1px;        /* Same as this menu's border-top-width */
    left: 1px;          /* Same as this menu's border-left-width */
}

.Menu.generic #Menu_content {
    background: white;
    border: 1px solid rgba(0, 0, 0, 0.2);
    -webkit-box-shadow: 0 2px 4px rgba( 0, 0, 0, 0.2 );
    -moz-box-shadow: 0 2px 4px rgba( 0, 0, 0, 0.2 );
    box-shadow: 0 2px 4px rgba( 0, 0, 0, 0.2 );
    cursor: default;
    margin: 0;
    outline: none;
}

.Menu.open #shield {
    display: block;
}

.Menu.open #Menu_description {
    background: white;
    border-color: rgba(0, 0, 0, 0.2);
    border-bottom-style: none;
}
</style>

<script>
Menu.prototype.extend({
    
    /*
     * Close the menu.
     * 
     * By default, this generates a menuClosed event. The event can be
     * suppressed by passing a triggerMenuClosed argument of false.
     */
    close: Control.iterator( function( triggerMenuClosed ) {
        //console.log( "Menu: hide" );
        this.removeClass( "open" );
        if ( triggerMenuClosed === undefined || triggerMenuClosed ) {
            this.trigger( "menuClosed" );
        }
    }),
    
    content: Control.chain( "$Menu_content", "content" ),
    
    description: Control.chain( "$Menu_description", "content", function() {
        if ( this.inDocument() ) {
            this._updateShield();
        }
    }),
     
    initialize: function() {
        
        this._super();
        this.genericIfClassIs( Menu );
        
        var self = this;
        this
            .click( function() {
                //console.log( "Menu: click" );
                if ( self.hasClass( "open" ) ) {
                    self.close();
                } else {
                    self.open();
                }
            })
            .inDocument( function() {
                this._updateShield();
            });
    },
    
    open: Control.iterator( function() {
        //console.log( "Menu: open" );
        this
            .addClass( "open" )
            .trigger( "menuOpened" );
    }),
    
    /*
     * The "shield" is a thin block that can be used to obscure the boundary
     * between the description and content so that those two elements can
     * appear to exist on a seamless surface. For this to work, the shield
     * needs to be (almost) as wide as the description. 
     */
    _updateShield: function() {
        // We want the width of the description including padding, but not
        // including border.
        var $description = this.$Menu_description();
        var shieldWidth = $description.width()
            + parseInt( $description.css( "padding-left" ) )
            + parseInt( $description.css( "padding-right" ) );
        this.$shield().width( shieldWidth );
    }
    
});
</script>

</Control>
