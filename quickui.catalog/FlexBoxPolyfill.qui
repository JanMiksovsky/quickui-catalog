<!--
A polyfill (shim) supporting the CSS flexible box layout model on newer browsers
and emulating some very basic aspects of that layout model on older browsers.

As of 3/12/12, Mozilla's flexbox support is too flaky to use. Among other
things, if the CSS position is set to absolute, Mozilla will report "display"
as "block" instead of "-moz-box" as expected. 
-->
 
<Control className="FlexBoxPolyfill">

<prototype>
    <Layout>
        <div id="FlexBoxPolyfill_panel1" />
        <div id="FlexBoxPolyfill_content" />
        <div id="FlexBoxPolyfill_panel2" />
    </Layout>
</prototype>

<style>
{
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    /* display: -moz-box; */
    /* display: -webkit-box; */
    /* display: box; */
}

> * {
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
}

#FlexBoxPolyfill_content {
    /* -moz-box-flex: 1; */
    /* -webkit-box-flex: 1; */
    /* box-flex: 1; */
}

.FlexBoxPolyfill.noFlexBox {
    position: relative;
}

.FlexBoxPolyfill.fill {
    height: 100%;
    overflow: hidden;
    position: absolute;
    width: 100%;
}
.FlexBoxPolyfill.fill.noFlexBox > * {
    position: absolute;
}
</style>

<script>
FlexBoxPolyfill.prototype.extend({
    
    /*
     * The content of the main center panel.
     */
    content: Control.chain( "$FlexBoxPolyfill_content", "content", function() {
        this.trigger( "sizeChanged" );
    }),
    
    /*
     * True if the control should fill its container.
     */
    fill: Control.chain( "applyClass/fill", function() {
        this.trigger( "sizeChanged" );
    }),
    
    layout: function() {
        var flexBoxVariants = [
            "box",
            /* "-moz-box" */
            "-webkit-box"
        ];
        var flexBox = $.inArray( this.css( "display" ), flexBoxVariants ) >= 0;
        if ( !flexBox ) {
            // Do the layout ourselves.
            var css = this._noFlexBoxCss();
            //console.log( css );
            this.$FlexBoxPolyfill_content().css( css );
            this.addClass( "noFlexBox" );
        }
        return this;
    },
    
    /*
     * The orientation of the panels: "horizontal" or "vertical".
     */
    orient: Control.property( function( orient ) {
        this.css({
            /* -moz-box-orient: orient, */
            "-webkit-box-orient": orient,
            "box-orient": orient
        });
    }),
    
    /*
     * Return the appropriate CSS to simulate flex behavior for the main content
     * panel.
     */
    _noFlexBoxCss: function() {
        var vertical = ( this.orient() === "vertical" );
        var leadingEdge = vertical ? "top" : "left";
        var trailingEdge = vertical ? "bottom" : "right";
        var measureFn = vertical ? $.prototype.outerHeight : $.prototype.outerWidth;
        var panel1 = this.$FlexBoxPolyfill_panel1();
        var panel2 = this.$FlexBoxPolyfill_panel2();
        var css = {};
        if ( this.fill() ) {
            css[ leadingEdge ] = measureFn.call( panel1, true );
            css[ trailingEdge ] = measureFn.call( panel2, true );
        } else {
            css[ leadingEdge ] = "inherit";
            css[ trailingEdge ] = "inherit";
        }
        return css;
    },
    
    /*
     * The content of the first docked panel.
     */    
    _panel1: Control.chain( "$FlexBoxPolyfill_panel1", "content", function() {
        this.trigger( "sizeChanged" );
    }),
    
    /*
     * The content of the second docked.
     */
    _panel2: Control.chain( "$FlexBoxPolyfill_panel2", "content", function() {
        this.trigger( "sizeChanged" );      
    })
});
</script>

</Control>