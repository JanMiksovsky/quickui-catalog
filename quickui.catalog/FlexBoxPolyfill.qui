<!--
A polyfill (shim) supporting the CSS flexible box layout model on newer browsers
and emulating some very basic aspects of that layout model on older browsers.

As of 3/12/12, Mozilla's flexbox support is too flaky to use. Among other
things, if the CSS position is set to absolute, Mozilla will report "display"
as "block" instead of "-moz-box" as expected, which makes it hard to tell
whether flexbox is even supported. Forcing the use of flexbox reveals more
bugs; it's just not worth using at this point.
-->
 
<Control className="FlexBoxPolyfill">

<content>
    <div id="FlexBoxPolyfill_panel1" />
    <div id="FlexBoxPolyfill_content" />
    <div id="FlexBoxPolyfill_panel2" />
</content>

<style>
{
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    /* display: -moz-box; */
    display: -webkit-box;
    display: box;
}

> * {
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
}

#FlexBoxPolyfill_content {
    /* -moz-box-flex: 1; */
    -webkit-box-flex: 1;
    box-flex: 1;
}

.FlexBoxPolyfill.noFlexBox {
    position: relative;
}

.FlexBoxPolyfill.fill {
    height: 100%;
    overflow: hidden;
    position: absolute;
    width: 100%;
}
.FlexBoxPolyfill.fill.noFlexBox > * {
    position: absolute;
}
</style>

<script>
FlexBoxPolyfill.prototype.extend({
    
    /*
     * Returns true if the browser supports the CSS flexible layout module,
     * or false if the control is using JavaScript layout logic.
     */ 
    browserSupportsFlexBox: function() {
        var flexBoxVariants = [
            "box",
            /* "-moz-box", */
            "-webkit-box"
        ];
        return $.inArray( this.css( "display" ), flexBoxVariants ) >= 0;
    },
    
    /*
     * The content of the main center panel.
     */
    content: Control.chain( "$FlexBoxPolyfill_content", "content" ),

    /*
     * True if the control should fill its container.
     */
    fill: Control.chain( "applyClass/fill", function() {
        if ( !this._checkFlexBox() ) {
            this.trigger( "layout" );
        }
    }),
    
    initialize: function() {
        var self = this;
        this.inDocument( function() {
            self._checkFlexBox();
        });
    },
    
    /*
     * The orientation of the panels: "horizontal" or "vertical".
     */
    orient: Control.property( function( orient ) {
        this.css({
            /* -moz-box-orient: orient, */
            "-webkit-box-orient": orient,
            "box-orient": orient
        });
        this._checkFlexBox();
    }, "horizontal"),
    
    _checkFlexBox: function() {
        
        var flexBox = this.browserSupportsFlexBox();

        /*
         * WebKit has a bug preventing use of overflow: auto in combination with
         * -webkit-box-orient: horizontal, a common need in this control.
         * See http://code.google.com/p/chromium/issues/detail?id=118004.
         * Until that gets fixed, we disable flexbox support on WebKit for
         * horizontal orientation. 
         */
        if ( $.browser.webkit && this.orient() === "horizontal" ) {
            flexBox = false;
        }
        
        if ( flexBox ) {
            // Let the browser do the layout.
            if ( !this._usingFlexBox() ) {
                this
                    .off( "layout" )
                    ._usingFlexBox( true );
            }
        } else {
            // We'll need to do the layout ourselves.
            if ( this._usingFlexBox() ) {
                var self = this;
                this
                    // Clear usingFlexBox before binding layout event; binding
                    // forces an initial layout handler call, which will need
                    // the noFlexBox class to be applied in order to calculate
                    // the layout properly.
                    ._usingFlexBox( false )
                    .on( "layout", function() {
                        var css = self._noFlexBoxCss();
                        self.$FlexBoxPolyfill_content().css( css );
                    });
            }
        }
        
        return flexBox;
    },

    /*
     * True if the control is currently using CSS flexible box layout, and
     * false if using manual layout.
     */
    _usingFlexBox: function( usingFlexBox ) {
        if ( usingFlexBox === undefined ) {
            return !this.hasClass( "noFlexBox" );
        } else {
            return this.toggleClass( "noFlexBox", !usingFlexBox );
        }
    },
    
    /*
     * Return the appropriate CSS to simulate flex behavior for the main content
     * panel.
     */
    _noFlexBoxCss: function() {
        var vertical = ( this.orient() === "vertical" );
        var leadingEdge = vertical ? "top" : "left";
        var trailingEdge = vertical ? "bottom" : "right";
        var measureFn = vertical ? $.prototype.outerHeight : $.prototype.outerWidth;
        var panel1 = this.$FlexBoxPolyfill_panel1();
        var panel2 = this.$FlexBoxPolyfill_panel2();
        var css = {};
        if ( this.fill() ) {
            css[ leadingEdge ] = measureFn.call( panel1, true );
            css[ trailingEdge ] = measureFn.call( panel2, true );
        } else {
            css[ leadingEdge ] = "inherit";
            css[ trailingEdge ] = "inherit";
        }
        return css;
    },
    
    /*
     * The content of the first docked panel.
     */    
    _panel1: Control.chain( "$FlexBoxPolyfill_panel1", "content", function() {
        if ( !this._usingFlexBox() ) {
            this.trigger( "layout" );
        }
    }),
    
    /*
     * The content of the second docked.
     */
    _panel2: Control.chain( "$FlexBoxPolyfill_panel2", "content", function() {
        if ( !this._usingFlexBox() ) {
            this.trigger( "layout" );
        }
    })
    
});
</script>

</Control>