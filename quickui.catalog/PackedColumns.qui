<!--
Pack children into columns.

The number of columns is variable, and is determined by diving the control's
available width by the column width (which is taken from the width of the
first child).
-->

<Control className="PackedColumns">

<style>
{
    position: relative;
}

> * {
    position: absolute;
}
</style>

<script>
PackedColumns.prototype.extend({
    
    /*
     * True if the columns should be centered. Default is false.
     */
    center: Control.property.bool( function() {
        if ( this.inDocument() ) {
            this.layout();
        }
    }),
    
    content: function( value ) {
        var result = this._super( value ); 
        this.checkForSizeChange();
        return result;
    },
    
    initialize: function() {
        var self = this;
        this.on( "layout sizeChanged", function() {
            self.layout();
        });
    },
    
    layout: function() {
        
        var children = this.children();
        var childCount = children.length;
        if ( childCount === 0 ) {
            return;
        }
        
        // Infer column width and inter-child margins from first child.
        var firstChild = children.eq(0);
        var columnWidth = firstChild.outerWidth();
        if ( columnWidth === 0 ) {
            return; // No width; perhaps child will load later.
        }
        var marginRight = parseInt( firstChild.css( "margin-right" ) );
        var marginBottom = parseInt( firstChild.css( "margin-bottom" ) );
        
        var availableWidth = this.width();
        var columns = Math.max(
                        Math.floor( ( availableWidth + marginRight )
                            / ( columnWidth + marginRight ) ),
                        1);

        var consumedWidth = columns * columnWidth
                            + ( columns - 1 ) * marginRight;
        var leftover = Math.max( availableWidth - consumedWidth, 0 );
        var offsetX = this.center()
            ? leftover / 2
            : 0;
        
        var columnHeight = [];
        for ( var childIndex = 0; childIndex < childCount; childIndex++ ) {
            
            // Find shortest column
            var shortestColumn = 0;
            for ( var column = 1; column < columns; column++ ) {
                var height = columnHeight[ column ] || 0;
                if ( height < columnHeight[ shortestColumn ] ) {
                    shortestColumn = column;
                }
            }
            
            // Add the current child to the shortest column
            var x = shortestColumn * ( columnWidth + marginRight ) + offsetX;
            var y = columnHeight[ shortestColumn ] || 0;
            var child = children.eq( childIndex );
            child.css({
                left: x,
                top: y
            });
            columnHeight[ shortestColumn ] = y + child.outerHeight() + marginBottom;
        }
    }
    
});
</script>

</Control>
