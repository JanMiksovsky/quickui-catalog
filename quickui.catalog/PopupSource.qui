<!--
A control with a popup.
-->

<Control className="PopupSource">
    
<content>
    <div id="PopupSource_content" />
    <Popup id="PopupSource_popup" />
</content>

<script>
PopupSource.prototype.extend({

    /*
     * Cancels the popup.
     */    
    cancel: Control.chain( "$PopupSource_popup", "cancel" ),

    /*
     * True if the user can cancel an open popup by pressing the Escape key.
     * Default is true.
     */
    cancelOnEscapeKey: Control.chain( "$PopupSource_popup", "cancelOnEscapeKey" ),

    /*
     * True if the popup should be canceled if the user clicks outside it.
     * Default is true.
     */
    cancelOnOutsideClick: Control.chain( "$PopupSource_popup", "cancelOnOutsideClick" ),

    /*
     * True if the popup should be canceled if the window loses focus.
     * Default is true.
     */
    cancelOnWindowBlur: Control.chain( "$PopupSource_popup", "cancelOnWindowBlur" ),

    /*
     * The element(s) with which the popup will be associated. By default,
     * clicking in the content will open the popup, and the popup will be
     * positioned with respect to this content.
     */
    content: Control.chain( "$PopupSource_content", "content" ),

    /*
     * The class of the content portion.
     */
    contentClass: Control.property[ "class" ]( function( contentClass ) {
        this.$PopupSource_content().transmute( contentClass, true, false, true );
    }),
    
    /*
     * Close the popup normally.
     */
    close: Control.chain( "$PopupSource_popup", "close" ),

    /*
     * True if the popup should be closed normally if the user clicks inside
     * it. Default is true.
     */
    closeOnInsideClick: Control.chain( "$PopupSource_popup", "closeOnInsideClick" ),

    initialize: function()
    {
        var self = this;
        this.$PopupSource_content().click( function( event ) {
            if ( self.openOnClick() ) {
                self.open();
            }
        });
        this.$PopupSource_popup()
            .on({
                "closed canceled": function() {
                    self.$PopupSource_popup()
                        .removeClass( "popupAppearsAbove popupAppearsBelow popupAlignLeft popupAlignRight" );
                    self.opened( false );
                },
                opened: function() {
                    self
                        ._positionPopup()
                        .opened( true );
                }
            });
    },

    /*
     * True if the popup should open when the user clicks in the control's
     * content. Default is true. 
     */
    openOnClick: Control.property.bool( null, true ),

    /*
     * Open the popup.
     */
    open: Control.chain( "$PopupSource_popup", "open" ),
    
    /*
     * Returns true if the popup is currently opened.
     */
    opened: function( opened ) {
        if ( opened === undefined ) {
            // We mirror the popup's own open state.
            return this.$PopupSource_popup().opened();
        } else {
            // If we're setting this, only set our own state.
            // The popup will have taken care of itself.
            return this.applyClass( "opened", opened );
        }
    },
    
    /*
     * The class used to render the overlay behind the popup.
     */
    overlayClass: Control.chain( "$PopupSource_popup", "overlayClass" ),
    
    /*
     * The content of the popup associated with the control.
     */
    popup: Control.chain( "$PopupSource_popup", "content" ),
    
    _positionPopup: function() {
        
        var offset = this.offset();
        var position = this.position();
        var top = Math.round( offset.top );
        var left = Math.round( offset.left );
        var height = this.outerHeight();
        var width = this.outerWidth();
        var bottom = top + height;
        var right = left + width;
        
        var $popup = this.$PopupSource_popup();
        var popupHeight = $popup.outerHeight( true );
        var popupWidth = $popup.outerWidth( true );

        var scrollTop = $( document ).scrollTop();
        var scrollLeft = $( document ).scrollLeft();
        var windowHeight = $( window ).height();
        var windowWidth = $( window ).width();
        
        var popupCss = {};

        // Vertically position below (preferred) or above the content.
        var popupFitsBelow = ( bottom + popupHeight <= windowHeight + scrollTop );
        var popupFitsAbove = ( top - popupHeight >= scrollTop );
        var popupAppearsBelow = ( popupFitsBelow || !popupFitsAbove );
        if ( !popupAppearsBelow ) {
            popupCss.top = position.top - popupHeight;   // Show above content
        }
        
        // Horizontally left (preferred) or right align w.r.t. content.
        var popupFitsLeftAligned = ( left + popupWidth <= windowWidth + scrollLeft );
        var popupFitsRightAligned = ( right - popupWidth >= scrollLeft );
        var popupAlignLeft = ( popupFitsLeftAligned || !popupFitsRightAligned );
        if ( !popupAlignLeft ) {
            popupCss.left = position.left + width - popupWidth; // Right align
        }

        $popup
            .toggleClass( "popupAppearsAbove", !popupAppearsBelow )
            .toggleClass( "popupAppearsBelow", popupAppearsBelow )
            .toggleClass( "popupAlignLeft", popupAlignLeft )
            .toggleClass( "popupAlignRight", !popupAlignLeft )
            .css( popupCss );
        
        return this;
    }
});

</script>

</Control>
