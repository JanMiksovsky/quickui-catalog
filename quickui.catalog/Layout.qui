<!-- Base class for controls that want to do custom layout work when resized. -->

<Control name="Layout">

<script>
Layout.prototype.extend({
    
    initialize: function() {
        var self = this;
        this.bind( "sizeChanged", function() {
            self.layout();
        });
        Layout.track( this );
    },
    
    // Base implementation does nothing.
    layout: function() {
        return this;
    }
    
    /* For debugging
    _log: function(s) {
        console.log(this.className + "#" + this.attr("id") + " " + s);
        return this;
    }
    */
    
});

// Class methods.
// TODO: Most of this has been factored into the new inDocument() event,
// so rewrite this to use that.
Layout.extend({
    
    /*
     * Re-layout any controls in the DOM.
     */
    recalc: function() {

        //console.log("recalc");
        if ( !this._controlsToLayout ) {
            return;
        }

        // Call the layout() method of any control whose size has changed.
        var i = 0;
        while ( i < this._controlsToLayout.length ) {
            var $control = Control( this._controlsToLayout[i] ).control();
            if ( $control ) {
                var previousSize = $control.data( "_size" );
                var size = {
                    height: $control.height(),
                    width: $control.width()
                };
                if ( previousSize === undefined ||
                    size.height != previousSize.height ||
                    size.width != previousSize.width ) {
                        
                    $control
                        .data( "_size", size )
                        .layout();
                }
                i++;
            }
            else
            {
                // Control unavailable, likely no longer in DOM;
                // remove it from our list of controls to track.
                this._controlsToLayout.splice( i, 1 );
            }
        }
    },
    
    /*
     * Start tracking the indicated controls for layout purposes.
     * We won't actually lay them out until they're added to the DOM.
     */
    track: function( $controls ) {
        //$controls._log("tracking");
        this._initialize();
        $controls.inDocument( function( $control ) {
            $control.layout();
            Layout._controlsToLayout = Layout._controlsToLayout.concat( $control );
        });
    },

    /* TODO: Allow a control to be stop being tracked for layout purposes.
    untrack: function($controls) {
        ...
        this.recalc();
    },
    */
    
    /*
     * Initialize layout engine overall (not a specific instance).
     */
    _initialize: function() {
        
        if ( this._initialized ) {
            // Already did this.
            return;
        }
        
        // The following control array is maintained in order such that
        // DOM parents come before their children. 
        this._controlsToLayout = [];
        
        // Recalc layout whenever the window size changes.
        $( window ).resize( function() {
            Layout.recalc();
        });
        
        this._initialized = true;
    }
        
});
</script>

</Control>
