<!--
Shows the most interesting photo for each day of a month
Note: This makes a *separate call* to Flickr's REST API for each day of the month,
which is terrible. Unfortunately, Flickr's API doesn't allow allow a way to get
the most interesting photo for each day of the month; separate calls have to be made
per day.
-->

<Control className="FlickrInterestingNavigator">

<prototype>
    <CalendarMonthNavigator
        dayClass="FlickrInterestingDay"
        dayNameFormat="namesAbbr"
        showTodayButton="false">
        <previousButtonContent>
            <span class="chevron">«</span>
            <MonthName id="previousMonthName" class="monthButtonName" />
        </previousButtonContent>
        <nextButtonContent>
            <MonthName id="nextMonthName" class="monthButtonName"/>
            <span class="chevron">»</span>
        </nextButtonContent>
    </CalendarMonthNavigator>
</prototype>

<style>
{
    font-family: Arial, Helvetica, sans-serif;
    width: 800px;
}

#header {
    border-bottom: 1px dotted #ddd;
    font-size: 12px;
}
#header #LateralNavigator_heading {
    color: #ff0084;
    text-align: center;
}

.dayOfWeek {
    font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
    font-size: 14px;
    font-weight: bold;
    padding: 5px;
    text-align: left;
    text-transform: uppercase;
}

#calendar {
    border-collapse: collapse;
    font-size: 18px;
    font-weight: bold;
}

.monthButtonName {
    color: #0063dc;
    text-decoration: underline;
}
.monthButtonName:hover {
    background-color: #0259C4;
    color: white;
    text-decoration: none;
}
.BasicButton.disabled .monthButtonName {
    background-color: inherit;
    color: black;
    text-decoration: none;
}

.chevron {
    color: #ff0084;
    font-weight: bold;
}

.FlickrInterestingDay.insideMonth {
    border-style: solid;
    border-width: 1px;
}
.FlickrInterestingDay.outsideMonth {
    visibility: hidden;
}
</style>

<script>
FlickrInterestingNavigator.prototype.extend({
    
    /*
     * The control's current culture.
     */
    culture: function( culture ) {
        var result = this._super( culture );
        if ( culture !== undefined ) {
            this.$previousMonthName().culture( culture );
            this.$nextMonthName().culture( culture );
        }
        return result;
    },
    
    /*
     * The date that will be included in the month (can be any day of the month).
     */
    date: function( date ) {
        result = this._super( date );
        if ( date !== undefined ) {
            
            // Show next/previous month names.
            var previousMonth = new Date( date.getTime() );
            previousMonth.setMonth( previousMonth.getMonth() - 1 );
            this.$previousMonthName()
                .month( previousMonth.getMonth() )
                .trigger( "layout" );

            var nextMonth = new Date( date.getTime() );
            nextMonth.setMonth( nextMonth.getMonth() + 1 );
            this.$nextMonthName()
                .month( nextMonth.getMonth() )
                .trigger( "layout" );
            
            // Disable navigation into future.
            var today = new Date();
            nextMonth.setDate( 1 );
            this.nextButtonDisabled( nextMonth > today );
                        
            this.$calendar().$days().loadPhoto();
        }
        return result;
    }
        
});
</script>

</Control>
