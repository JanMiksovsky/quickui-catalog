<!--
An input control (e.g., a check box or radio button) with an associated label.
The label is automatically associated with the input, ensuring that user clicks
on the label have the same effect as clicking the input control.
-->

<Control className="LabeledInput">

<content>
    <input id="input"/><label id="LabeledInput_content"/>
</content>

<style>
{
    display: inline-block;
}

#LabeledInput_content {
    user-select: none;
    -khtml-user-select:none;
    -moz-user-select: none;
    -webkit-user-select: none;
}
</style>

<script>
LabeledInput.prototype.extend({
    
    /*
     * True if the input control is checked, false if unchecked.
     */
    checked: Control.chain( "_inputControl", "prop/checked" ),
    
    /*
     * The label for the input control.
     * This can be arbitrary content, not just text.
     */
    content: Control.chain( "$LabeledInput_content", "content" ),
    
    /*
     * True if the input control should be disabled.
     */
    disabled: Control.chain( "_inputControl", "prop/disabled" ),
    
    initialize: function() {
        var id = LabeledInput.generateUniqueId();
        this._inputControl().prop( "id", id );
        this.$LabeledInput_content().prop( "for", id );
    },
    
    /*
     * Return the input control.
     * We restrict our search to direct children, in case the label also
     * includes input controls.
     */
    _inputControl: Control.chain( "children", "filter/input" ),
    
    /*
     * Sets the input control's type.
     * This is set in subclasses CheckBox and RadioButton.
     */
    _type: Control.chain( "_inputControl", "prop/type" )

});

// Class members
LabeledInput.extend({
    
    generateUniqueId: function() {
        return "_input" + this._count++;
    },
    
    _count: 0
    
});
</script>

</Control>
