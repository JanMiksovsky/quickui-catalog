<!--
An input control (e.g., a check box or radio button) with an associated label.

The control's top element is a label, which ensures that user clicks anywhere
within have the same effect as clicking the input control.
-->

<Control className="LabeledInput" tag="label">

<content>
    <input/><span id="LabeledInput_content"/>
</content>

<style>
> input {
    margin-right: 0;    /* Don't leave unclickable gap to right of input */
}

#LabeledInput_content {
    padding-left: 3px;  /* Restore normal gap suppressed above */
    user-select: none;
    -khtml-user-select:none;
    -moz-user-select: none;
    -webkit-user-select: none;
}
</style>

<script>
LabeledInput.prototype.extend({
    
    /*
     * True if the input control is checked, false if unchecked.
     */
    checked: Control.chain( "_inputControl", "prop/checked" ),
    
    /*
     * The label for the input control.
     * This can be arbitrary content, not just text.
     */
    content: Control.chain( "$LabeledInput_content", "content" ),
    
    /*
     * True if the input control should be disabled.
     */
    disabled: Control.chain( "_inputControl", "prop/disabled" ),
    
    /*
     * Return the input control.
     * We restrict our search to direct children, in case the label also
     * includes input controls.
     */
    _inputControl: Control.chain( "children", "filter/input" ),
    
    /*
     * Sets the input control's type.
     * This is set in subclasses CheckBox and RadioButton.
     */
    _type: function( type ) {
        var input = this._inputControl();        
        if ( type !== undefined && $.browser.msie && parseInt( $.browser.version ) < 9 ) {
            // IE8 can't change an input's "type" attribute.
            for ( i = 0; i < this.length; i++ ) {
                var oldInput = input.eq(i);
                // Create a new input to replace the existing one.
                var newInput = $( "<input type='" + type + "'/>" ).prop({
                    // Copy old input's properties to new one.
                    checked: oldInput.prop( "checked" ),
                    disabled: oldInput.prop( "disabled" )
                });
                oldInput.replaceWith( newInput );
            }
            return this;
        } else {
            return input.prop( "type", type );
        }
    }

});
</script>

</Control>
