<!--
Shows a random photo from Flickr's Interestingness collection for a recent day.
By default, this can be used 100 times before it starts repeating photos.

This gets photos from the day before yesterday in the current time zone.
This is done because yesterday in the current time zone may still be "today" in
Flickr's time zone, and Flickr doesn't make photos available for the current day. 
-->

<Control className="FlickrInterestingPhoto" tag="img">
    
<script>
FlickrInterestingPhoto.prototype.extend({
    
    initialize: function() {
        
        this.on( "load" , function() {
            
            /*
             * HACK for IE. When the load event is triggered, IE reports the
             * width of the img element as the width of its own little image
             * placeholder icon. This stinks -- there's no way to get the
             * correct width or height until sometime after the load event
             * completes.
             * 
             * As a workaround, if we're in IE and see that the width is 28px,
             * we assume we're dealing with the image placeholder icon instead
             * of the real image. By forcing the width to "auto", IE reports the
             * correct photo width (and height) instead.
             * 
             * This allows anyone listening for the layout event to get
             * the correct dimensions of the photo, instead of the dimensions
             * of the image placeholder icon. 
             */
            var control = Control( this );
            if ( $.browser.msie && parseInt( control.width() ) === 28 ) {
                console.log( control.width() + " " + control.height() );
                control.css( "width", "auto" );
            }

            control.checkForSizeChange();
        });

        var photo = this.photo();
        if ( !photo || photo.length === 0 ) {
            this.reload();
        }
    },
    
    /*
     * Reload the photo.
     */
    reload: Control.iterator( function() {
        var self = this;
        FlickrInterestingPhoto.getRandomPhoto( function( photo ) {
            self.prop( "src", photo );
        }, this.photoSize());
    }),
    
    /*
     * The location of the current photo image.
     */
    photo: Control.chain( "attr/src" ),
    
    /*
     * The size of photo to show.
     * 
     * This uses the size suffixes from http://www.flickr.com/services/api/misc.urls.html
     * s   small square 75x75
     * t   thumbnail, 100 on longest side
     * m   small, 240 on longest side
     * -   medium, 500 on longest side
     * z   medium 640, 640 on longest side
     * o   original image, either a jpg, gif or png, depending on source format
     * 
     * If this property is not set, the photo will be medium size.
     */
    photoSize: Control.property( function() {
        var photo = this.photo();
        if ( photo && photo.length > 0 ) {
            this.reload();
        }
    })
    
});

// Class methods
FlickrInterestingPhoto.extend({
    
    /*
     * Your Flickr API key. By default, this uses the QuickUI account API key.
     * Set this to your own key before the first call to this control.
     */
    apiKey: "c3685bc8d8cefcc1d25949e4c528cbb0",

    /*
     * Return a (somewhat) random photo from the Interestingness collection.
     * The set of photos are obtained only once per page; once the set is
     * exhausted, subsequent calls will cycle through the set. 
     */    
    getRandomPhoto: function( callback, size ) {
        var self = this;
        this.getFlickrInterestingPhotos().done( function( flickrPhotos ) {
            self._counter = ( self._counter >= 0 )
                ? ( self._counter + 1 ) % flickrPhotos.length 
                : 0;
            var flickrPhoto = flickrPhotos[ self._counter ];
            var photo = self.getFlickrImageSrc( flickrPhoto, size );
            callback( photo );
        });
    },

    getFlickrInterestingPhotos: function() {
        if ( !this._promise ) {

            // This is the first request for photos.             
            var deferred = new jQuery.Deferred();
            this._promise = deferred.promise();
            
            var day = new Date();
            day.setDate( day.getDate() - 2 );   // Day before yesterday
            var flickrDate = this._formatFlickrDate( day );
            
            var params = {
                method: "flickr.interestingness.getList",
                date: flickrDate,
                per_page: 100
            };
    
            var self = this;
            this.getFlickrPhotos( params, function( flickrPhotos ) {
                // Shuffle the photos before returning them.
                self._shuffle( flickrPhotos );
                self._flickrPhotos = flickrPhotos;
                deferred.resolve( flickrPhotos );
            });
        }
        return this._promise;
    },
    
    getFlickrPhotos: function( params, callback ) {
        var baseUrl = "http://api.flickr.com/services/rest/";
        var url = baseUrl 
                    + "?api_key=" + this.apiKey
                    + this._formatUrlParams( params )
                    + "&format=json"
                    + "&jsoncallback=?";
        $.getJSON( url, function( data ) {
            if ( data && data.photos ) {
                callback( data.photos.photo );
            }
        });
    },
    
    getFlickrImageSrc: function( flickrPhoto, size ) {
        var sizeParam = ( size ? "_" + size : "" );
        return "http://farm" + flickrPhoto.farm +
               ".static.flickr.com/" + flickrPhoto.server +
               "/" + flickrPhoto.id +
               "_" + flickrPhoto.secret +
               sizeParam +
               ".jpg";
    },
    
    getFlickrImageHref: function(flickrPhoto) {
        return "http://flickr.com/photo.gne?id=" + flickrPhoto.id;
    },
    
    // Return a date in YYYY-MM-DD format.
    _formatFlickrDate: function( date ) {
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var s = year + "-" +
                ( ( month < 10 ) ? "0" : "" ) + month + "-" +
                ( ( day < 10 ) ? "0" : "" ) + day;
        return s;
    },
    
    // Convert the given params dictionary into a string that can be
    // passed on a URL.
    _formatUrlParams: function( params ) {
        var s = "";
        $.each( params, function( key, value ) {
            s += "&" + key + "=" + value;
        });
        return s;
    },

    /*
     * Perform a Fisher-Yates shuffle.
     * From http://sedition.com/perl/javascript-fy.html
     */
    _shuffle: function( array ) {
        for ( var i = array.length - 1; i >= 0; i-- ) {
            var j = Math.floor( Math.random() * ( i + 1 ) );
            var temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
    }

});
</script>

</Control>
