<!-- Button base class. Handles mouse events, abstract styles. -->

<Control className="BasicButton">

<style>
{
    cursor: pointer;
    display: inline-block;
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    user-select: none;
}

.BasicButton.disabled {
    cursor: default;
}

/* Generic appearance */
.BasicButton.generic {
    border: 1px solid gray;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    font-family: sans-serif;
    padding: .25em .5em;
}

/* 
 * We use ".hovered" rather than ":hover" so that the hover state can be
 * programmatically applied to a control.
 */
.BasicButton.generic.hovered {
    background-color: lightgray;
}

.BasicButton.generic.pressed {
    background-color: gray;
    color: white;
}
.BasicButton.generic.disabled {
    background-color: inherit;
    color: gray;
}
</style>

<script>
BasicButton.prototype.extend({
    
    isFocused: Control.property.bool( null, false ),
    isKeyPressed: Control.property.bool( null, false ),
    isMouseButtonDown: Control.property.bool( null, false ),
    isMouseOverControl: Control.property.bool( null, false ),
    
    initialize: function() {
        var self = this;
        this
            .bind({
                blur: function( event ) { self.trackBlur( event ); },
                click: function( event ) {
                    if ( self.disabled() ) {
                        event.stopImmediatePropagation();
                    }
                },
                focus: function( event ) { self.trackFocus( event ); },
                keydown: function( event ) { self.trackKeydown( event ); },
                keyup: function( event ) { self.trackKeyup( event ); },
                mousedown: function( event ) { self.trackMousedown( event ); },
                mouseup: function( event ) { self.trackMouseup( event ); }
            })
            .genericIfClassIs( BasicButton )
            .hover(
                function( event ) { self.trackMousein( event ); },
                function( event ) { self.trackMouseout( event ); }
            )
            ._renderButton();
    },
    
    trackBlur: function( event ) {
        
        this.removeClass( "focused" );

        // Losing focus causes the button to override any key that had been pressed.
        this.isKeyPressed( false );

        this.isFocused( false );
        this._renderButton();
    },
    
    // The current state of the button.
    buttonState: function() {
        if ( this.disabled() ) {
            return BasicButton.state.disabled;
        } else if ( (this.isMouseButtonDown() && this.isMouseOverControl() )
            || this.isKeyPressed()) {
            return BasicButton.state.pressed;
        } else if ( this.isFocused() ) {
            return BasicButton.state.focused;
        } else if ( this.isMouseOverControl() /* || this.isMouseButtonDown() */ )
        {
            return BasicButton.state.hovered;
        }

        return BasicButton.state.normal;
    },

    /*
     * Get/set whether the control is disabled.
     * This is mapped to the disabled property on the control top-level element.
     * Setting this also applies "disabled" class in case the :disabled pseudo-class
     * is not supported.
     */
    disabled: function( disabled ) {
        if ( disabled === undefined ) {
            return this.prop( "disabled" );
        } else {
            var disabledBool = (String( disabled ) === "true" );
            this
                .prop( "disabled", disabledBool )
                .toggleClass( "disabled", disabledBool )
                ._renderButton();
            return this;
        }
    },
    
    trackFocus: function( event ) {
        if ( !this.disabled() )  {
            this.addClass( "focused" );
            this.isFocused( true );
            this._renderButton();
        }
    },
    
    trackKeydown: function( event ) {
        if ( !this.disabled() && (event.keyCode == 32 /* space */ || event.keyCode == 13 /* return */) ) {
            this.isKeyPressed( true );        
            this._renderButton();
        }
    },
    
    trackKeyup: function( event ) {
        this.isKeyPressed( false );
        this._renderButton();
    },
    
    trackMousedown: function( event ) {
        if ( !this.disabled() ) {
            this.addClass( "pressed" );
            this.isMouseButtonDown( true );
            this._renderButton();
        }
    },
    
    trackMousein: function( event ) {
        if (!this.disabled() )  {
            this.addClass( "hovered" );
            this.isMouseOverControl( true );
            this._renderButton();
        }
    },
    
    trackMouseout: function(event) {
        this
            .removeClass( "focused" )
            .removeClass( "hovered" )
            .removeClass( "pressed" );
        this.isMouseOverControl( false );
        this._renderButton();
    },
    
    trackMouseup: function( event ) {
        this.removeClass( "pressed" );
        this.isMouseButtonDown( false );
        this._renderButton();
    },
    
    _renderButtonState: function( buttonState ) {},
    
    _renderButton: function() {
        this._renderButtonState( this.buttonState() );
    }
});
$.extend( BasicButton, {
    state: {
        normal: 0,
        hovered: 1,
        focused: 2,
        pressed: 3,
        disabled: 4
    }
});
</script>

</Control>