<!-- Button base class. Handles mouse events, abstract styles. -->

<Control className="BasicButton" tag="button" generic="true">

<style>
{
    background: none; /* Better to start with no background than a browser-dependent one. */
    border: none; /* Many button styles don't want a border by default. */
    border-width: 0; /* IE8 thinks there's a border width even when border is none. */ 
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    color: inherit; /* Suppress browser's use of special button text color. */
    cursor: pointer; /* Improves consistency */
    font-size: 100%; /* Corrects font size not being inherited in all browsers */
    margin: 0; /* Addresses margins set differently in IE6/7, FF3+, S5, Chrome */
    overflow: visible; /* Removes inner spacing in IE8 without affecting normal text inputs */
    text-align: left; /* Many more things behave like buttons than want to be center-aligned like a stock button. */
    vertical-align: baseline; /* Improves appearance and consistency in all browsers */
}

.BasicButton.disabled {
    cursor: default; /* Re-set default cursor for disabled buttons */
}

/*
 * Removes inner padding and border in FF3+
 * www.sitepen.com/blog/2008/05/14/the-devils-in-the-details-fixing-dojos-toolbar-buttons/
 */
.BasicButton::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/*
 * Generic apperance
 * By design, this is fairly plain, with just a bit of 3D, in order to fit in
 * reasonably well in many contexts. Inspired by Twitter Bootstrap's buttons.
 */
.BasicButton.generic {
    background: whitesmoke;
    background-image: -moz-linear-gradient(top, white, #e6e6e6);
    background-image: -ms-linear-gradient(top, white, #e6e6e6);
    background-image: -webkit-linear-gradient(top, white, #e6e6e6);
    background-image: linear-gradient(top, white, #e6e6e6);
    border: 1px solid #ccc;
    -moz-border-radius: 3px;
    -webkit-border-radius: 3px;
    border-radius: 3px;
    -moz-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .2), 0 1px 2px rgba(0, 0, 0, .05);
    -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .2), 0 1px 2px rgba(0, 0, 0, .05);
    box-shadow: inset 0 1px 0 rgba(255, 255, 255, .2), 0 1px 2px rgba(0, 0, 0, .05);
    color: #333;
    font-family: sans-serif; /* Addresses font-family inconsistency between 'textarea' and other form elements. */
    padding: 0.3em 0.6em;
    text-align: center;
    text-shadow: 0 1px 1px rgba(255,255,255,.75);
    white-space: nowrap;
    vertical-align: middle;
}

/* Opt out of border, background, etc. in the normal state. */
.BasicButton.quiet {
    background: none;
    border-color: transparent;
    box-shadow: none;
}

/* 
 * We use ".hover" as well as ":hover" so the hover state can be
 * programmatically applied.
 */
.BasicButton.generic:hover,
.BasicButton.generic.hover {
    background-color: #e6e6e6;
    background-image: -moz-linear-gradient(top, white, #eee);
    background-image: -ms-linear-gradient(top, white, #eee);
    background-image: -webkit-linear-gradient(top, white, #eee);
    background-image: linear-gradient(top, white, #eee);
    border-bottom-color: #ccc;
    border-left-color: #ddd;
    border-right-color: #ddd;
    border-top-color: #e0e0e0;
    color: #222;
    text-shadow: 0 1px 3px white;
}

.BasicButton.generic:active,
.BasicButton.generic.active {
    background-color: #d9d9d9;
    background-image: none;
    border-color: #aaa;
    -moz-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.15), 0 1px 2px rgba(0, 0, 0, 0.05);
    -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.15), 0 1px 2px rgba(0, 0, 0, 0.05);
    box-shadow: inset 0 1px 4px 2gba(0, 0, 0, 0.15), 0 1px 2px rgba(0, 0, 0, 0.05);
    color: #111;
    outline: 0;
}

.BasicButton.generic.disabled,
.BasicButton.generic[disabled] {
    background: whitesmoke;
    border: 1px solid #ccc;
    -moz-box-shadow: none;
    -webkit-box-shadow: none;
    box-shadow: none;
    color: #999;
    text-shadow: none;
}
</style>

<script>
BasicButton.prototype.extend({
    
    /*
     * The current state of the button. Read-only.
     * This will return one of the following values:
     * 
     *  BasicButton.normal
     *  BasicButton.hover
     *  BasicButton.focus
     *  BasicButton.active
     *  BasicButton.disabled
     */
    buttonState: function() {
        if ( this.disabled() ) {
            return BasicButton.state.disabled;
        } else if ( (this.isMouseButtonDown() && this.isMouseOverControl() )
            || this.isKeyPressed()) {
            return BasicButton.state.active;
        } else if ( this.isFocused() ) {
            return BasicButton.state.focus;
        } else if ( this.isMouseOverControl() )
        {
            return BasicButton.state.hover;
        }

        return BasicButton.state.normal;
    },

    /*
     * True if the button is disabled.
     * 
     * Setting this also applies "disabled" class for IE8, which doesn't support
     * the :disabled pseudo-class.
     */
    disabled: Control.chain( "prop/disabled", function( disabled ) {
        this
            .toggleClass( "disabled", disabled )
            ._renderButton();
    }),

    initialize: function() {
        var self = this;
        this
            .on({
                blur: function( event ) { self._trackBlur( event ); },
                focus: function( event ) { self._trackFocus( event ); },
                keydown: function( event ) { self._trackKeydown( event ); },
                keyup: function( event ) { self._trackKeyup( event ); },
                mousedown: function( event ) { self._trackMousedown( event ); },
                mouseup: function( event ) { self._trackMouseup( event ); }
            })
            .hover(
                function( event ) { self._trackMousein( event ); },
                function( event ) { self._trackMouseout( event ); }
            )
            ._renderButton();
    },
    
    /*
     * True if the button currently has the focus.
     */
    isFocused: Control.property.bool( null, false ),
    
    /*
     * True if the user is currently pressing down a key.
     */
    isKeyPressed: Control.property.bool( null, false ),
    
    /*
     * True if the mouse button is currently down.
     */
    isMouseButtonDown: Control.property.bool( null, false ),
    
    /*
     * True if the mouse is currently over the button.
     */
    isMouseOverControl: Control.property.bool( null, false ),

    /*
     * True if the button's "quiet" style should be applied. The generic quiet
     * styling shows no background or border effects in the button's normal
     * state -- only when the user is interacting with the button -- so that
     * the button can more easily blend in as a component of other controls.
     */
    quiet: Control.chain( "applyClass/quiet" ),
    
    _renderButtonState: function( buttonState ) {},
    
    _renderButton: function() {
        this._renderButtonState( this.buttonState() );
    },
    
    _trackBlur: function( event ) {
        this
            .removeClass( "focus" )
            // Losing focus causes the button to override any key that had been active.
            .isKeyPressed( false )
            .isFocused( false )
            ._renderButton();
    },
    
    _trackFocus: function( event ) {
        this
            .addClass( "focus" )
            .isFocused( true )
            ._renderButton();
    },
    
    _trackKeydown: function( event ) {
        if ( event.which === 32 /* Space */ || event.which === 13 /* Enter */ ) {
            this
                .isKeyPressed( true )        
                ._renderButton();
        }
    },
    
    _trackKeyup: function( event ) {
        this
            .isKeyPressed( false )
            ._renderButton();
    },
    
    _trackMousedown: function( event ) {
        this
            .addClass( "active" )
            .isMouseButtonDown( true )
            ._renderButton();
    },
    
    _trackMousein: function( event ) {
        this
            .addClass( "hover" )
            .isMouseOverControl( true )
            ._renderButton();
    },
    
    _trackMouseout: function(event) {
        this
            .removeClass( "focus hover active" )
            .isMouseOverControl( false )
            ._renderButton();
    },
    
    _trackMouseup: function( event ) {
        this
            .removeClass( "active" )
            .isMouseButtonDown( false )
            ._renderButton();
        console.log( "BasicButton: _trackMouseUp" );
    }

});

/*
 * Class members
 */
BasicButton.extend({
    state: {
        normal: 0,
        hover: 1,
        focus: 2,
        active: 3,
        disabled: 4
    }
});
</script>

</Control>