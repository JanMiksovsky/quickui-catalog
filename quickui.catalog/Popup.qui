<!--
Base class for popups, menus, dialogs, things that appear temporarily over other things.
-->

<Control className="Popup">

<style>
{
    display: none;
    position: absolute;
    z-index: 0;
}

.Popup.opened {
    display: block;
}

/* Generic appearance */
.Popup.generic {
    background: white;
    border: 1px solid gray;
    box-shadow: 3px 3px 5px rgba( 0, 0, 0, 0.5 );
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    padding: .25em;
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    user-select: none;
}
</style>

<script>
Popup.prototype.extend({

    blanket: Control.property(),
    
    /*
     * True if the user can cancel an open popup by pressing the Escape key.
     * Default is true.
     */
    cancelOnEscapeKey: Control.property.bool( null, true ),
    
    /*
     * True if the popup should be canceled if the user clicks outside it.
     * Default is true. See also the modal() property.
     */
    cancelOnOutsideClick: Control.property.bool( null, true ),
    
    /*
     * True if the popup should be canceled if the window loses focus.
     * Default is true.
     */
    cancelOnWindowBlur: Control.property.bool( null, true ),
    
    /*
     * True if the popup should be closed normally if the user clicks inside
     * it. Default is true.
     */
    closeOnInsideClick: Control.property.bool( null, true ),
    
    /*
     * Cancel the popup. This is just like closing it, but raises a "canceled"
     * event instead.
     * 
     * This has no effect if the popup is already closed.
     */
    cancel: function() {
        return this._close( "canceled" );
    },
    
    /*
     * Close the popup (dismiss it). This raises a "closed" event.
     * 
     * This has no effect if the popup is already closed.
     */
    close: function() {
        return this._close( "closed" );
    },
    
    initialize: function()
    {
        this.genericIfClassIs( Popup );
    },
    
    /*
     * True if the popup absorbs clicks made outside the popup. The default
     * is false. Setting this to true implicitly sets cancelOnOutsideClick()
     * and cancelOnWindowBlur() to false.
     */
    modal: Control.property.bool( function( modal ) {
        if ( modal ) {
            this
                .cancelOnOutsideClick( false )
                .cancelOnWindowBlur( false );
        }
    }, false ),

    /*
     * Open the popup (show it). This raises an "opened" event.
     * 
     * This has no effect if the popup is already opened.
     */
    open: function()
    {
        if ( this.opened() ) {
            // Already opened
            return this;
        }

        var $blanket = Blanket.create()
            .lift( this.target() || this )
            .modal( this.modal() );
        this.blanket( $blanket );
        
        this
            ._eventsOn()
            .opened( true )
            .trigger( "opened" )
            // In case popup wants to resize anything now that it's visible.
            .checkForSizeChange();
        
        // Position the popup after the layout recalc.
        var positionPopup = this.positionPopup();
        if ( positionPopup ) {
            positionPopup.call( this );
        }
        
        return this;
    },
    
    /*
     * Open the popup.
     */
    opened: Control.chain( "applyClass/opened" ),
    
    /*
     * A callback function that will be invoked to position the popup.
     * This is implemented as a property instead of an overrideable method
     * so that the position logic can be set on a per-instance basis without
     * having to create a new subclass.
     */
    positionPopup: Control.property(),
    
    target: Control.property(),

    /*
     * Take care of hiding the popup, its blanket, and raising the indicated event.
     */
    _close: function( closeEventName )
    {
        if ( !this.opened() ) {
            // Already closed
            return this;
        }
        
        if ( closeEventName ) {
            this.trigger( closeEventName );
        }

        if ( this.blanket() != null ) {
            // Destroy blanket
            this.blanket().restore();
            this.blanket().remove();
            this.blanket(null);
        }
        
        return this
            ._eventsOff()
            .opened( false );
    },
    
    /*
     * Wire up events.
     */
    _eventsOn: function() {
        
        // Create the handlers as functions we can save in control properties.
        var self = this;
        var handlerDocumentKeydown = function( event ) {
            if ( self.cancelOnEscapeKey() && event.which === 27 /* Escape */ ) {
                // Pressing ESC cancels popup.
                self.cancel();
                event.stopPropagation();
            }
        };
        var handlerDocumentClick = function( event ) {
            var outsideClick = ( $( event.target ).parents().filter( self ).length === 0 );
            if ( outsideClick && self.cancelOnOutsideClick() ) {
                // User clicked outside popup; implicitly cancel it.
                self.cancel();
                event.stopPropagation();
            } else if ( !outsideClick && self.closeOnInsideClick() ) {
                // Use click inside popup; implicitly close it.
                self.close();
                event.stopPropagation();
            }
        };
        var handlerWindowBlur = function( event ) {
            if ( self.cancelOnWindowBlur() ) {
                // Cancel popup when window loses focus.
                self.cancel();
            }
        };

        // Wire up the event handlers.
        $( document ).on({
            click: handlerDocumentClick,
            keydown: handlerDocumentKeydown
        });
        $( window ).on( "blur", handlerWindowBlur );
        
        // Save references to the event handlers so we can unbind them later.
        return this
            ._handlerDocumentClick( handlerDocumentClick )
            ._handlerDocumentKeydown( handlerDocumentKeydown )
            ._handlerWindowBlur( handlerWindowBlur );
    },
    
    /*
     * Unbind the event handlers we bound earlier.
     */
    _eventsOff: function() {
        $( document ).off({
            click: this._handlerDocumentClick(),
            keydown: this._handlerDocumentKeydown()
        });
        $( window ).off( "blur", this._handlerWindowBlur() );
        return this
            ._handlerDocumentClick( null )
            ._handlerDocumentKeydown( null )
            ._handlerWindowBlur( null )
    },
    
    // Handler for the document click event
    _handlerDocumentClick: Control.property(),

    // Handler for the keydown event
    _handlerDocumentKeydown: Control.property(),
    
    // Handler for the window blur event
    _handlerWindowBlur: Control.property()

});
</script>

</Control>