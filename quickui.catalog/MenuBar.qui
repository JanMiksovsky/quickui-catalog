<Control className="MenuBar">

<style>
/* Subclasses can extend this style */
.MenuBar.opened {}

/* Generic appearance */
.MenuBar.generic {
    background: white;
}
</style>

<script>
MenuBar.prototype.extend({
    
    /*
     * Close currently open any menus.
     */
    close: Control.iterator( function() {
        if ( !this.opened() ) {
            // Already closed
            return;
        }
        
        var $blanket = this._blanket();
        if ( $blanket ) {
            $blanket
                .restore()
                .remove();
            this._blanket( null );
        }
        
        this
            ._closeOpenMenus()
            .opened( false );
    }),
    
    initialize: function() {
        
        this.genericIfClassIs( MenuBar );
        
        var self = this;
        this.on({
            menuClosed: function( event ) {
                if ( self._openMenus() == null ) {
                    // No longer any open menus.
                    self.close();
                }
            },
            menuOpened: function( event ) {
                self.open();
                // Close open menus other than the one which just opened.
                var newMenu = $( event.target ).closest( ".Menu" ).control();
                self._closeOpenMenus( newMenu );
            }
        });
        this.on( "mouseenter", ".Menu", function( event ) {
            if ( self.opened() ) {
                // Riffing: Implicitly open the menu the user hovered into
                // if it's not already open.
                var newMenu = $( event.target ).closest( ".Menu" ).control();
                if ( newMenu && !newMenu.opened() ) {
                    newMenu.open();
                }
            }
        });
    },
    
    /*
     * Returns true if any of the menu bar's menus are currently open.
     */
    opened: Control.chain( "applyClass/opened" ),
    
    open: Control.iterator( function() {
        if ( this.opened() ) {
            // Already open
            return;
        }
        
        var $blanket = Blanket.create().lift( this );
        this._blanket( $blanket );
        
        this.opened( true );
    }),
    
    _blanket: Control.property(),
    
    /*
     * Close open menus. If a keepMenu is specified, leave that menu open.
     */
    _closeOpenMenus: function( keepMenu ) {
        var openMenus = this._openMenus();
        if ( openMenus ) {
            openMenus.not( keepMenu ).close();
        }
        return this;
    },
    
    /*
     * Return the currently open menus.
     */
    _openMenus: Control.chain( "children", "filter/.Menu.opened", "control" )
    
});
</script>

</Control>