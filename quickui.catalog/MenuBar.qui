<Control className="MenuBar">

<style>
/* Subclasses can extend this style */
.MenuBar.active {}

/* Generic appearance */
.MenuBar.generic {
    background: white;
}
</style>

<script>
MenuBar.prototype.extend({
    
    /*
     * Returns true if a menu in the menu bar is currently open.
     */
    active: Control.chain( "applyClass/active", function( active ) {
        var documentClickHandler = this._documentClickHandler();
        var windowBlurHandler = this._windowBlurHandler();
        if ( active ) {
            
            // Wire up event handlers.
            
            var self = this;
            if ( !documentClickHandler ) {
                documentClickHandler = function( event ) {
                    // If user clicked outside the menu bar (and its menu),
                    // then close all open menus.
                    var outsideClick = ( $( event.target ).parents().filter( self ).length === 0 );
                    if ( outsideClick ) {
                        self.close();
                    }
                };
                $( document ).on( "click", documentClickHandler );
                this._documentClickHandler( documentClickHandler );
            }
            if ( !windowBlurHandler ) {
                windowBlurHandler = function( event ) {
                    // Close any open menus on blur.
                    self.close();
                };
                $( window ).on( "blur", windowBlurHandler );
                this._windowBlurHandler( windowBlurHandler );
            }
            
        } else if ( !active ) {
            
            // Tear down event handlers.
            
            if ( documentClickHandler ) {
                $( document ).off( "click", documentClickHandler );
                this._documentClickHandler( null );
            }
            if ( windowBlurHandler ) {
                $( window ).off( "blur", windowBlurHandler );
                this._windowBlurHandler( null );
            }
            
        }
    }),
    
    /*
     * Close currently open any menus.
     */
    close: Control.iterator( function() {
        this._closeOpenMenus();
    }),
    
    initialize: function() {
        
        this.genericIfClassIs( MenuBar );
        
        var self = this;
        this.on({
            menuClosed: function( event ) {
                if ( self._openMenus() == null ) {
                    // No longer any open menus.
                    self.active( false );
                }
            },
            menuOpened: function( event ) {
                self.active( true );
                // Close open menus other than the one which just opened.
                var newMenu = $( event.target ).closest( ".Menu" ).control();
                self._closeOpenMenus( newMenu );
            }
        });
        this.on( "mouseenter", ".Menu", function( event ) {
            if ( self.active() ) {
                // Riffing: Implicitly open the menu the user hovered into
                // if it's not already open.
                var newMenu = $( event.target ).closest( ".Menu" ).control();
                if ( newMenu && !newMenu.isOpen() ) {
                    newMenu.open();
                }
            }
        });
    },
    
    /*
     * Close open menus. If a keepMenu is specified, leave that menu open.
     */
    _closeOpenMenus: function( keepMenu ) {
        var openMenus = this._openMenus();
        if ( openMenus ) {
            openMenus.not( keepMenu ).close();
        }
    },
    
    // Handler for the document click event.
    _documentClickHandler: Control.property(),
    
    /*
     * Return the currently open menus.
     */
    _openMenus: Control.chain( "children", "filter/.Menu.open", "control" ),
    
    // Handler for the window blur event.
    _windowBlurHandler: Control.property()
    
});
</script>

</Control>