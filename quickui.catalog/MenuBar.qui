<Control className="MenuBar">

<style>
/* Subclasses can extend this style */
.MenuBar.active {}

/* Generic appearance */
.MenuBar.generic {
    background: white;
}
</style>

<script>
MenuBar.prototype.extend({
    
    /*
     * Close currently open any menus.
     */
    close: Control.iterator( function() {
        this._closeOpenMenus();
    }),
    
    initialize: function() {
        
        this.genericIfClassIs( MenuBar );
        
        var self = this;
        this.on({
            menuClosed: function( event ) {
                if ( self._openMenus() == null ) {
                    // No longer any open menus.
                    self.active( false );
                }
            },
            menuOpened: function( event ) {
                self.active( true );
                // Close open menus other than the one which just opened.
                var newMenu = $( event.target ).closest( ".Menu" ).control();
                self._closeOpenMenus( newMenu );
            }
        });
        this.on( "mouseenter", ".Menu", function( event ) {
            if ( self.active() ) {
                // Riffing: Implicitly open the menu the user hovered into
                // if it's not already open.
                var newMenu = $( event.target ).closest( ".Menu" ).control();
                if ( newMenu && !newMenu.isOpen() ) {
                    newMenu.open();
                }
            }
        });
    },
    
    /*
     * True if a menu in the menu bar is currently open.
     * 
     * TODO: Factor out event stuff. Don't turn off all window/document events.
     */
    active: Control.chain( "applyClass/active", function( active ) {
        var handlingGlobalClick = this._handlingGlobalClick();
        if ( active && !handlingGlobalClick ) {
            var self = this;
            $( document ).on( "click", function( event ) {
                self._globalClick( event );
            });
            $( window ).on( "blur", function( event ) {
                //console.log( "window: blur" );
                self.close();
            })
            this._handlingGlobalClick( true );
            //console.log( "MenuBar: global click tracking on" );
        } else if ( !active && handlingGlobalClick ) {
            $( document ).off( "click" );
            $( window ).off( "blur" );
            this._handlingGlobalClick( false );
            //console.log( "MenuBar: global click tracking off" );
        }
    }),
    
    /*
     * Close open menus. If a keepMenu is specified, leave that menu open.
     */
    _closeOpenMenus: function( keepMenu ) {
        var openMenus = this._openMenus();
        if ( openMenus ) {
            openMenus.not( keepMenu ).close();
        }
    },
    
    // TODO: Better name
    _globalClick: function( event ) {
        // See if click bubbled up from within this menu bar (and its menus).
        var outsideClick = ( $( event.target ).parents().filter( this ).length === 0 );
        if ( outsideClick ) {
            //console.log( "MenuBar: outside click" );
            this.close();
        }
    },
    
    _handlingGlobalClick: Control.property.bool(),
    
    /*
     * Return the currently open menus.
     */
    _openMenus: Control.chain( "children", "filter/.Menu.open", "control" )
    
});
</script>

</Control>