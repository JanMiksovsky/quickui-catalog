<!--
Position a top and/or bottom panel above or below a main content panel.

This uses the CSS flexbox module where available, and falls back to a manual
layout algorithm on older browsers.

As of 3/12/12, Mozilla's flexbox support is too flaky to be worth it. Among
other things, if the CSS position is set to absolute, Mozilla will report
"display" as "block" instead of "-moz-box" as expected. 
-->

<Control className="VerticalPanelsNew">

<prototype>
    <Layout>
        <div id="VerticalPanels_top" />
        <div id="VerticalPanels_content" />
        <div id="VerticalPanels_bottom" />
    </Layout>
</prototype>

<style>
{
    /* -moz-box-orient: vertical; */
    -webkit-box-orient: vertical;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    /* display: -moz-box; */
    display: -webkit-box;
    display: box;
    /*
    Setting height when not in fill mode prevents resize logic from
    cycling endlessly and shouldn't otherwise affect anything.
    */
    height: 100%;
    position: relative;
}

> * {
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    position: relative; /* So inner controls can be absolutely positioned within */
}

.VerticalPanelsNew.fill {
    overflow-y: hidden;
    position: absolute;
    width: 100%;
}

#VerticalPanels_content {
    -moz-box-flex: 1;
    -webkit-box-flex: 1;
    box-flex: 1;
}
.VerticalPanelsNew.fill #VerticalPanels_content {
    overflow-y: auto;
}
</style>

<script>
VerticalPanelsNew.prototype.extend({

    /*
     * The content of the bottom panel.
     */    
    bottom: Control.chain( "$VerticalPanels_bottom", "content", function() {
        this.trigger( "sizeChanged" );        
    }),
    
    /*
     * The content of the main center panel.
     */
    content: Control.chain( "$VerticalPanels_content", "content", function() {
        this.trigger( "sizeChanged" );        
    }),
    
    /*
     * True if the control should fill its container. This will also enable
     * an automatic vertical scroll bar on the main content panel.
     */
    fill: Control.chain( "applyClass/fill", function() {
        this.trigger( "sizeChanged" );
    }),
    
    layout: function() {
        if ( !this._flexBox() ) {
            // Do the layout ourselves.
            if ( this.fill() ) {
                var panelHeight = this.$VerticalPanels_top().outerHeight() + this.$VerticalPanels_bottom().outerHeight();
                var availableHeight = this.height() - panelHeight;
                this.$VerticalPanels_content().height( availableHeight );
            } else {
                this.$VerticalPanels_content().css( "height", "inherit" );
            }
        }
        return this;
    },
    
    /*
     * The content of the top panel.
     */
    top: Control.chain( "$VerticalPanels_top", "content", function() {
        this.trigger( "sizeChanged" );        
    }),
    
    /*
     * Return true if we're using the CSS flexbox layout module.
     */
    _flexBox: function() {
        var display = this.css( "display" );
        var flexBoxVariants = [
            "box",
            /* "-moz-box" */
            "-webkit-box"
        ];
        return $.inArray( display, flexBoxVariants ) >= 0;
    }

});
</script>

</Control>
