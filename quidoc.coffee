###
Generate doc comments from CoffeeScript source files.
###


fs = require "fs"
path = require "path"

# Walk the tree whose root is the given path, applying the given function to
# each file. If a regex is supplied, only names matching that expression are
# listed.
walk = ( directory, regex, fn ) ->
  files = fs.readdirSync directory
  for file in files
    filePath = path.join directory, file
    fn filePath if regex is undefined or regex.test( file )
    walk filePath if fs.statSync( filePath ).isDirectory()


# Return the name for the control class defined in the CoffeeScript source text.
controlClassName = ( source ) ->
  regexClassName = ///
    \r?\n                     # Start of line (no indentation)
    class                     # "class" keyword
    \s+                       # whitespace
    (?:window.)?              # optional "window."
    (                         # Group captures class name
      [a-zA-Z0-9$][\w]+       # JavaScript identifier
    )
  ///
  match = regexClassName.exec source
  if match?
    match[1]
  else
    null


# Return the comments found for members defined in the CoffeeScript source text.
controlComments = ( source ) ->
  regexComments = ///
    (                         # First group captures the comment
      (?:                     # Non-capturing group
        \r?\n\x20\x20# .*     # A comment line indented two spaces
      )
      +                       # Any number of comment lines
    )
    \r?\n\x20\x20             # Identifier line indented two spaces
    (                         # Second group captures the identifier
      [a-zA-Z0-9$][\w]+       # JavaScript member identifier
    )
    :                         # Colon terminates identifier
  ///g
  comments = {}
  match = regexComments.exec source
  while match != null
    [ full, commentBlock, identifier ] = match
    comments[ identifier ] = commentText commentBlock
    match = regexComments.exec source
  comments


# Remove the "  # " found at the start of a CoffeeScript block comment.
commentText = ( commentBlock ) ->
  regexCommentText = /\r?\n  # (.*)/g
  text = ""
  match = regexCommentText.exec commentBlock
  while match != null
    [ full, lineText ] = match
    if lineText.length == 0
      text += "\n\n"
    else
      if text.length > 0 and text[ text.length - 1 ] != "\n"
        text += " "
      text += lineText
    match = regexCommentText.exec commentBlock
  text


# Return the documentation for all CoffeeScript files below the given root.
projectDocs = ( root ) ->
  docs = {}
  walk root, /\.coffee$/, ( filePath ) ->
    source = fs.readFileSync filePath
    className = controlClassName source
    if className?
      docs[ className ] = controlComments source
  docs


# Main
args = process.argv.splice 2 # Ignore "node" and script name args
root = if args[0]? then path.resolve args[0] else process.cwd()
docs = projectDocs root
json =  JSON.stringify docs, null, "  "
js = """
  /* Control member documentation generated by quidoc.js */
  controlDocumentation = controlDocumentation || {};
  $.extend( controlDocumentation, #{json} );
"""
console.log js
