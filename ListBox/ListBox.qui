<!--
A list box that allows single and multiple selection.
The user can select items with the mouse and keyboard.
-->

<Control name="ListBox">

<prototype>
    <List itemClass="ButtonBase" />
</prototype>

<style>
> * {
    display: block;
    outline: none;
}

/* Generic appearance */
.ListBox.generic {
    border: 1px solid lightgray;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

.ListBox.generic .ButtonBase.generic {
    border: none;
    width: 100%;
}
.ListBox.generic .ButtonBase.generic.selected {
    background: highlight;
    color: highlighttext;
}
</style>

<script>
ListBox.prototype.extend({
    
    initialize: function() {
        
        this._super();
        this.genericIfClassIs( ListBox );
        
        this.attr( "tabindex", "tabindex" );
        
        var self = this;
        this.on("click", function( event ) {
                var child = self._getChildContainingElement( event.target );
                if ( child ) {
                    self._elementClick( child );
                }
            })
            .on("keydown", function( event ) {
                self._keydown( event );
            });
    },
    
    selectedElement: function( element ) {
        if ( element === undefined ) {
            return this.controls().filter( ".selected" )[0];
        } else {
            var previousElement = this.selectedElement();
            this.controls()
                .removeClass( "selected" )
                .filter( element )
                .addClass( "selected" );
            if ( element !== previousElement ) {
                this.trigger( "selectionChanged" );
            }
            return this;
        }
    },
    
    selectedIndex: function( index ) {
        if ( index === undefined ) {
            var element = this.selectedElement();
            return element
                ? this.controls().index( element )
                : -1;
        } else {
            var n = parseInt( index );
            var element = this.controls().eq( n );
            this.selectedElement( element );
            return this;
        }
    },
    
    selectedItem: function( item ) {
        
    },
    
    _elementClick: function( element ) {
        this.selectedElement( element );
        // $( child ).focus();
    },
    
    _getChildContainingElement: function( element ) {
        return $( element ).closest( this.children() );
    },
    
    _keydown: function( event ) {
        
        var handled;
        switch ( event.which ) {
            
            case 35: // End
                handled = this._selectLastElement();
                break;
            
            case 36: // Home
                handled = this._selectFirstElement();
                break;
            
            case 37: // Left
            case 38: // Up
                handled = this._selectPreviousElement();
                break;
                
            case 39: // Right
            case 40: // Down
                handled = this._selectNextElement();
                break;
                
            default:
                handled = false;
                break;
        }
        
        if (handled)
        {
            event.stopPropagation();
            event.preventDefault();
        }
    },
    
    _refresh: function() {
        
    },
    
    _selectFirstElement: function() {
        if ( this.controls().length > 0 ) {
            this.selectedIndex( 0 );
            return true;
        }
        return false;
    },
    
    _selectLastElement: function() {
        if ( this.controls().length > 0 ) {
            this.selectedIndex( this.controls().length - 1 );
            return true;
        }
        return false;
    },
    
    _selectNextElement: function() {
        var index = this.selectedIndex() + 1;
        if ( index < this.controls().length ) {
            this.selectedIndex( index );
            return true;
        }
        return false;
    },
    
    _selectPreviousElement: function() {
        var index = this.selectedIndex() - 1;
        if ( index >= 0 && this.controls().length > 0 ) {
            this.selectedIndex( index );
            return true;
        }
        return false;
    }
    
});
</script>

</Control>
