<!--
A list box that allows single and multiple selection.
The user can select items with the mouse and keyboard.
-->

<Control name="ListBox">

<prototype>
    <List itemClass="ButtonBase" />
</prototype>

<style>
> * {
    display: block;
}

/* Generic appearance */
.ListBox.generic .ButtonBase.generic {
    border: none;
    width: 100%;
}
.ListBox.generic .ButtonBase.generic.selected {
    background: highlight;
    color: highlighttext;
}
</style>

<script>
ListBox.prototype.extend({
    
    activeElement: function() {
        
    },
    
    activeIndex: function() {
        
    },
    
    activeItem: function() {
        
    },
    
    initialize: function() {
        
        this._super();
        this.genericIfClassIs( ListBox );
        
        var self = this;
        this.on("click", function( event ) {
                var child = self._getChildContainingElement( event.target );
                if ( child ) {
                    self.toggleElement( child );
                    $( child ).focus();
                }
            })
            .on("keydown", function( event ) {
                self._keydown( event );
            });
    },
    
    multiSelect: Control.property.bool( null, false ),
    
    selectedElement: function( element ) {
        
    },
    
    selectedIndex: function( index ) {
        
    },
    
    selectedItems: function( items ) {
        
    },
    
    selectedElements: function( elements ) {
        if ( elements === undefined ) {
            return this.controls().filter( ".selected" );
        } else {
            this.controls()
                .removeClass( "selected" )
                .filter( elements )
                .addClass( "selected" );
            return this;
        }
    },
    
    selectedIndices: function( indices ) {
        
    },
        
    toggleElement: function( element, toggle ) {
        $( element ).toggleClass( "selected", toggle );
        return this;
    },

    _getChildContainingElement: function( element ) {
        return $( element ).closest( this.children() );
    },
    
    _keydown: function( event ) {
        
        var handled;
        switch ( event.which ) {
            
            case 37: // Left
            case 38: // Up
                this._selectPreviousElement();
                handled = true;
                break;
                
            case 39: // Right
            case 40: // Down
                this._selectNextElement();
                handled = true;
                break;
                
            default:
                handled = false;
                break;
        }
        
        if (handled)
        {
            event.stopPropagation();
            event.preventDefault();
        }
    },
    
    _refresh: function() {
        
    },
    
    _selectNextElement: function() {
        console.log( "next" );
    },
    
    _selectPreviousElement: function() {
        console.log( "previous" );
    }
    
});
</script>

</Control>
