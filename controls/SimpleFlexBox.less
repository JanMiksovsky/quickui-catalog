.SimpleFlexBox {

  -moz-box-sizing: border-box;
  box-sizing: border-box;
  /* display: -moz-box; */
  display: -webkit-box;
  display: box;

  & > * {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    position: relative; /* So elements contained by panels can fill panels. */
  }

  .SimpleFlexBox_content {
    /* -moz-box-flex: 1; */
    -webkit-box-flex: 1;
    box-flex: 1;
  }

  &.horizontal {
    /* -moz-box-orient: horizontal; */
    -webkit-box-orient: horizontal;
    box-orient: horizontal;
  }

  &.vertical {
    /* -moz-box-orient: vertical; */
    -webkit-box-orient: vertical;
    box-orient: vertical;
  }

  &.constrainHeight {
    /* This can be overridden, but seems like a useful default. */
    height: 100%;
  }

  /* noFlexBox will be applied where flexbox is unsupported or known to be buggy. */
  &.noFlexBox {

    position: relative;

    &.horizontal {

      display: table;
      width: 100%;

      & > * {
        display: table-cell;
        vertical-align: top;
      }

      & > .panel {
        width: 0;   /* Forces panel to its minimum width; not actually zero width. */
        /*
         * In Mozilla, the contents of the main content panel end up wider than the
         * content panel itself (likely an issue with using position: absolute
         * within a table cell). This can cause the side panels to end up behind the
         * main panel, rendering the contents of the side panels inaccessible. So,
         * try to force the side panels on top of the main panel.
         */
        z-index: 1;
      }

    }

    &.constrainHeight {

      display: inherit;

      & > * {
        display: inherit; 
        position: absolute;
        vertical-align: inherit;
      }

      & > .panel {
        width: auto;
      }

    }

  }

}
